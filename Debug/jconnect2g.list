
jconnect2g.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001874  08001874  00011874  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080018f8  080018f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080018fc  080018fc  000118fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  20000000  08001900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000226c  20000044  08001944  00020044  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200022b0  08001944  000222b0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  9 .debug_info   000049ad  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000010e6  00000000  00000000  00024a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001db7  00000000  00000000  00025aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000150  00000000  00000000  000278b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00027a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001a96  00000000  00000000  00027a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001c04  00000000  00000000  00029526  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002b12a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000aec  00000000  00000000  0002b1a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000044 	.word	0x20000044
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800185c 	.word	0x0800185c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000048 	.word	0x20000048
 8000100:	0800185c 	.word	0x0800185c

08000104 <Board_Init>:
uint8_t u8GSMTxBuffer[GSM_USART_TX_BUFF_MAX];
uint8_t u8GSMRxBuffer[GSM_USART_RX_BUFF_MAX];


void Board_Init(void)
{
 8000104:	b507      	push	{r0, r1, r2, lr}
	IO_Init();
 8000106:	f000 ffe5 	bl	80010d4 <IO_Init>
	Serial_Init();
 800010a:	f001 f86d 	bl	80011e8 <Serial_Init>
	Serial_InitBuffer(eSerial_Debug, u8DebugRxBuffer, DEBUG_USART_RX_BUFF_MAX, u8DebugTxBuffer, DEBUG_USART_TX_BUFF_MAX);
 800010e:	2280      	movs	r2, #128	; 0x80
 8000110:	0052      	lsls	r2, r2, #1
 8000112:	9200      	str	r2, [sp, #0]
 8000114:	4b06      	ldr	r3, [pc, #24]	; (8000130 <Board_Init+0x2c>)
 8000116:	4907      	ldr	r1, [pc, #28]	; (8000134 <Board_Init+0x30>)
 8000118:	2000      	movs	r0, #0
 800011a:	f001 f8af 	bl	800127c <Serial_InitBuffer>
	Serial_InitBuffer(eSerial_GSM, u8GSMRxBuffer, GSM_USART_RX_BUFF_MAX, u8GSMTxBuffer, GSM_USART_TX_BUFF_MAX);
 800011e:	2280      	movs	r2, #128	; 0x80
 8000120:	0152      	lsls	r2, r2, #5
 8000122:	9200      	str	r2, [sp, #0]
 8000124:	4b04      	ldr	r3, [pc, #16]	; (8000138 <Board_Init+0x34>)
 8000126:	4905      	ldr	r1, [pc, #20]	; (800013c <Board_Init+0x38>)
 8000128:	2001      	movs	r0, #1
 800012a:	f001 f8a7 	bl	800127c <Serial_InitBuffer>
	//Serial_InitBuffer(eSerial_Debug, u8DebugRxBuffer, DEBUG_USART_RX_BUFF_MAX, u8DebugTxBuffer, DEBUG_USART_TX_BUFF_MAX);
}
 800012e:	bd07      	pop	{r0, r1, r2, pc}
 8000130:	20001060 	.word	0x20001060
 8000134:	20002160 	.word	0x20002160
 8000138:	20000060 	.word	0x20000060
 800013c:	20001160 	.word	0x20001160

08000140 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000140:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000142:	2101      	movs	r1, #1
 8000144:	4b34      	ldr	r3, [pc, #208]	; (8000218 <SystemInit+0xd8>)
#if defined(STM32F051)  
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000146:	4835      	ldr	r0, [pc, #212]	; (800021c <SystemInit+0xdc>)
  RCC->CR |= (uint32_t)0x00000001;
 8000148:	681a      	ldr	r2, [r3, #0]
 800014a:	430a      	orrs	r2, r1
 800014c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800014e:	685a      	ldr	r2, [r3, #4]
 8000150:	4002      	ands	r2, r0
 8000152:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000154:	681a      	ldr	r2, [r3, #0]
 8000156:	4832      	ldr	r0, [pc, #200]	; (8000220 <SystemInit+0xe0>)
 8000158:	4002      	ands	r2, r0
 800015a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	4831      	ldr	r0, [pc, #196]	; (8000224 <SystemInit+0xe4>)
 8000160:	4002      	ands	r2, r0
 8000162:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000164:	685a      	ldr	r2, [r3, #4]
 8000166:	4830      	ldr	r0, [pc, #192]	; (8000228 <SystemInit+0xe8>)
 8000168:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800016a:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800016c:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800016e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000170:	4382      	bics	r2, r0
 8000172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000176:	482d      	ldr	r0, [pc, #180]	; (800022c <SystemInit+0xec>)
 8000178:	4002      	ands	r2, r0
 800017a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800017c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800017e:	2080      	movs	r0, #128	; 0x80
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000180:	438a      	bics	r2, r1
 8000182:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->CIR = 0x00000000;
 8000184:	2200      	movs	r2, #0
 8000186:	609a      	str	r2, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000188:	9200      	str	r2, [sp, #0]
 800018a:	9201      	str	r2, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800018c:	2280      	movs	r2, #128	; 0x80
 800018e:	6819      	ldr	r1, [r3, #0]
 8000190:	0252      	lsls	r2, r2, #9
 8000192:	430a      	orrs	r2, r1
 8000194:	601a      	str	r2, [r3, #0]
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000196:	0280      	lsls	r0, r0, #10
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000198:	22a0      	movs	r2, #160	; 0xa0
 800019a:	0004      	movs	r4, r0
 800019c:	01d2      	lsls	r2, r2, #7
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800019e:	6819      	ldr	r1, [r3, #0]
 80001a0:	4001      	ands	r1, r0
 80001a2:	9101      	str	r1, [sp, #4]
    StartUpCounter++;  
 80001a4:	9900      	ldr	r1, [sp, #0]
 80001a6:	3101      	adds	r1, #1
 80001a8:	9100      	str	r1, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001aa:	9901      	ldr	r1, [sp, #4]
 80001ac:	2900      	cmp	r1, #0
 80001ae:	d102      	bne.n	80001b6 <SystemInit+0x76>
 80001b0:	9900      	ldr	r1, [sp, #0]
 80001b2:	4291      	cmp	r1, r2
 80001b4:	d1f3      	bne.n	800019e <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	4022      	ands	r2, r4
 80001ba:	d000      	beq.n	80001be <SystemInit+0x7e>
  {
    HSEStatus = (uint32_t)0x01;
 80001bc:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001be:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c0:	9a01      	ldr	r2, [sp, #4]
 80001c2:	2a01      	cmp	r2, #1
 80001c4:	d126      	bne.n	8000214 <SystemInit+0xd4>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80001c6:	2111      	movs	r1, #17
 80001c8:	4a19      	ldr	r2, [pc, #100]	; (8000230 <SystemInit+0xf0>)
 80001ca:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001cc:	685a      	ldr	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80001ce:	4919      	ldr	r1, [pc, #100]	; (8000234 <SystemInit+0xf4>)
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001d0:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80001d2:	685a      	ldr	r2, [r3, #4]
 80001d4:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80001d6:	685a      	ldr	r2, [r3, #4]
 80001d8:	400a      	ands	r2, r1
 80001da:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 80001dc:	2288      	movs	r2, #136	; 0x88
 80001de:	6859      	ldr	r1, [r3, #4]
 80001e0:	0352      	lsls	r2, r2, #13
 80001e2:	430a      	orrs	r2, r1
 80001e4:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80001e6:	2280      	movs	r2, #128	; 0x80
 80001e8:	6819      	ldr	r1, [r3, #0]
 80001ea:	0452      	lsls	r2, r2, #17
 80001ec:	430a      	orrs	r2, r1
 80001ee:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80001f0:	2280      	movs	r2, #128	; 0x80
 80001f2:	0492      	lsls	r2, r2, #18
 80001f4:	6819      	ldr	r1, [r3, #0]
 80001f6:	4211      	tst	r1, r2
 80001f8:	d0fc      	beq.n	80001f4 <SystemInit+0xb4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80001fa:	2103      	movs	r1, #3
 80001fc:	685a      	ldr	r2, [r3, #4]
 80001fe:	438a      	bics	r2, r1
 8000200:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000202:	2202      	movs	r2, #2
 8000204:	6859      	ldr	r1, [r3, #4]
 8000206:	430a      	orrs	r2, r1

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000208:	210c      	movs	r1, #12
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800020a:	605a      	str	r2, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800020c:	685a      	ldr	r2, [r3, #4]
 800020e:	400a      	ands	r2, r1
 8000210:	2a08      	cmp	r2, #8
 8000212:	d1fb      	bne.n	800020c <SystemInit+0xcc>
}
 8000214:	bd13      	pop	{r0, r1, r4, pc}
 8000216:	46c0      	nop			; (mov r8, r8)
 8000218:	40021000 	.word	0x40021000
 800021c:	08ffb80c 	.word	0x08ffb80c
 8000220:	fef6ffff 	.word	0xfef6ffff
 8000224:	fffbffff 	.word	0xfffbffff
 8000228:	ffc0ffff 	.word	0xffc0ffff
 800022c:	fffffeac 	.word	0xfffffeac
 8000230:	40022000 	.word	0x40022000
 8000234:	ffc07fff 	.word	0xffc07fff

08000238 <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000238:	220c      	movs	r2, #12
{
 800023a:	b570      	push	{r4, r5, r6, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800023c:	4e13      	ldr	r6, [pc, #76]	; (800028c <SystemCoreClockUpdate+0x54>)
 800023e:	4d14      	ldr	r5, [pc, #80]	; (8000290 <SystemCoreClockUpdate+0x58>)
 8000240:	6873      	ldr	r3, [r6, #4]
 8000242:	4013      	ands	r3, r2
  switch (tmp)
 8000244:	2b04      	cmp	r3, #4
 8000246:	d001      	beq.n	800024c <SystemCoreClockUpdate+0x14>
 8000248:	2b08      	cmp	r3, #8
 800024a:	d00a      	beq.n	8000262 <SystemCoreClockUpdate+0x2a>
      SystemCoreClock = HSE_VALUE;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <SystemCoreClockUpdate+0x5c>)
 800024e:	602b      	str	r3, [r5, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000250:	6873      	ldr	r3, [r6, #4]
  SystemCoreClock >>= tmp;  
 8000252:	682a      	ldr	r2, [r5, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000254:	061b      	lsls	r3, r3, #24
 8000256:	0f1b      	lsrs	r3, r3, #28
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	791b      	ldrb	r3, [r3, #4]
  SystemCoreClock >>= tmp;  
 800025c:	40da      	lsrs	r2, r3
 800025e:	602a      	str	r2, [r5, #0]
}
 8000260:	bd70      	pop	{r4, r5, r6, pc}
      pllmull = ( pllmull >> 18) + 2;
 8000262:	230f      	movs	r3, #15
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000264:	22c0      	movs	r2, #192	; 0xc0
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000266:	6874      	ldr	r4, [r6, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000268:	6871      	ldr	r1, [r6, #4]
      pllmull = ( pllmull >> 18) + 2;
 800026a:	0ca4      	lsrs	r4, r4, #18
 800026c:	401c      	ands	r4, r3
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800026e:	0252      	lsls	r2, r2, #9
      pllmull = ( pllmull >> 18) + 2;
 8000270:	3402      	adds	r4, #2
      if (pllsource == 0x00)
 8000272:	4211      	tst	r1, r2
 8000274:	d103      	bne.n	800027e <SystemCoreClockUpdate+0x46>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000276:	4808      	ldr	r0, [pc, #32]	; (8000298 <SystemCoreClockUpdate+0x60>)
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000278:	4344      	muls	r4, r0
 800027a:	602c      	str	r4, [r5, #0]
 800027c:	e7e8      	b.n	8000250 <SystemCoreClockUpdate+0x18>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800027e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <SystemCoreClockUpdate+0x5c>)
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000282:	4019      	ands	r1, r3
 8000284:	3101      	adds	r1, #1
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000286:	f001 f9d1 	bl	800162c <__udivsi3>
 800028a:	e7f5      	b.n	8000278 <SystemCoreClockUpdate+0x40>
 800028c:	40021000 	.word	0x40021000
 8000290:	20000000 	.word	0x20000000
 8000294:	007a1200 	.word	0x007a1200
 8000298:	003d0900 	.word	0x003d0900

0800029c <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 800029c:	2390      	movs	r3, #144	; 0x90
{
 800029e:	b510      	push	{r4, lr}
  if(GPIOx == GPIOA)
 80002a0:	05db      	lsls	r3, r3, #23
 80002a2:	4298      	cmp	r0, r3
 80002a4:	d10a      	bne.n	80002bc <GPIO_DeInit+0x20>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80002a6:	2080      	movs	r0, #128	; 0x80
 80002a8:	2101      	movs	r1, #1
 80002aa:	0280      	lsls	r0, r0, #10
 80002ac:	f000 fbd0 	bl	8000a50 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	2100      	movs	r1, #0
 80002b4:	0280      	lsls	r0, r0, #10
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80002b6:	f000 fbcb 	bl	8000a50 <RCC_AHBPeriphResetCmd>
    }
  }
}
 80002ba:	bd10      	pop	{r4, pc}
  else if(GPIOx == GPIOB)
 80002bc:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <GPIO_DeInit+0x98>)
 80002be:	4298      	cmp	r0, r3
 80002c0:	d108      	bne.n	80002d4 <GPIO_DeInit+0x38>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80002c2:	2080      	movs	r0, #128	; 0x80
 80002c4:	2101      	movs	r1, #1
 80002c6:	02c0      	lsls	r0, r0, #11
 80002c8:	f000 fbc2 	bl	8000a50 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 80002cc:	2080      	movs	r0, #128	; 0x80
 80002ce:	2100      	movs	r1, #0
 80002d0:	02c0      	lsls	r0, r0, #11
 80002d2:	e7f0      	b.n	80002b6 <GPIO_DeInit+0x1a>
  else if(GPIOx == GPIOC)
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <GPIO_DeInit+0x9c>)
 80002d6:	4298      	cmp	r0, r3
 80002d8:	d108      	bne.n	80002ec <GPIO_DeInit+0x50>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80002da:	2080      	movs	r0, #128	; 0x80
 80002dc:	2101      	movs	r1, #1
 80002de:	0300      	lsls	r0, r0, #12
 80002e0:	f000 fbb6 	bl	8000a50 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 80002e4:	2080      	movs	r0, #128	; 0x80
 80002e6:	2100      	movs	r1, #0
 80002e8:	0300      	lsls	r0, r0, #12
 80002ea:	e7e4      	b.n	80002b6 <GPIO_DeInit+0x1a>
  else if(GPIOx == GPIOD)
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <GPIO_DeInit+0xa0>)
 80002ee:	4298      	cmp	r0, r3
 80002f0:	d108      	bne.n	8000304 <GPIO_DeInit+0x68>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 80002f2:	2080      	movs	r0, #128	; 0x80
 80002f4:	2101      	movs	r1, #1
 80002f6:	0340      	lsls	r0, r0, #13
 80002f8:	f000 fbaa 	bl	8000a50 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 80002fc:	2080      	movs	r0, #128	; 0x80
 80002fe:	2100      	movs	r1, #0
 8000300:	0340      	lsls	r0, r0, #13
 8000302:	e7d8      	b.n	80002b6 <GPIO_DeInit+0x1a>
  else if(GPIOx == GPIOE)
 8000304:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <GPIO_DeInit+0xa4>)
 8000306:	4298      	cmp	r0, r3
 8000308:	d108      	bne.n	800031c <GPIO_DeInit+0x80>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 800030a:	2080      	movs	r0, #128	; 0x80
 800030c:	2101      	movs	r1, #1
 800030e:	0380      	lsls	r0, r0, #14
 8000310:	f000 fb9e 	bl	8000a50 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8000314:	2080      	movs	r0, #128	; 0x80
 8000316:	2100      	movs	r1, #0
 8000318:	0380      	lsls	r0, r0, #14
 800031a:	e7cc      	b.n	80002b6 <GPIO_DeInit+0x1a>
    if(GPIOx == GPIOF)
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <GPIO_DeInit+0xa8>)
 800031e:	4298      	cmp	r0, r3
 8000320:	d1cb      	bne.n	80002ba <GPIO_DeInit+0x1e>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8000322:	2080      	movs	r0, #128	; 0x80
 8000324:	2101      	movs	r1, #1
 8000326:	03c0      	lsls	r0, r0, #15
 8000328:	f000 fb92 	bl	8000a50 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 800032c:	2080      	movs	r0, #128	; 0x80
 800032e:	2100      	movs	r1, #0
 8000330:	03c0      	lsls	r0, r0, #15
 8000332:	e7c0      	b.n	80002b6 <GPIO_DeInit+0x1a>
 8000334:	48000400 	.word	0x48000400
 8000338:	48000800 	.word	0x48000800
 800033c:	48000c00 	.word	0x48000c00
 8000340:	48001000 	.word	0x48001000
 8000344:	48001400 	.word	0x48001400

08000348 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800034a:	680b      	ldr	r3, [r1, #0]
 800034c:	9301      	str	r3, [sp, #4]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800034e:	2300      	movs	r3, #0
    pos = ((uint32_t)0x01) << pinpos;
 8000350:	2501      	movs	r5, #1
 8000352:	409d      	lsls	r5, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000354:	9a01      	ldr	r2, [sp, #4]
 8000356:	402a      	ands	r2, r5

    if (currentpin == pos)
 8000358:	4295      	cmp	r5, r2
 800035a:	d12d      	bne.n	80003b8 <GPIO_Init+0x70>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800035c:	790a      	ldrb	r2, [r1, #4]
 800035e:	1e54      	subs	r4, r2, #1
 8000360:	2c01      	cmp	r4, #1
 8000362:	d816      	bhi.n	8000392 <GPIO_Init+0x4a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000364:	6884      	ldr	r4, [r0, #8]
 8000366:	005f      	lsls	r7, r3, #1
 8000368:	0026      	movs	r6, r4
 800036a:	2403      	movs	r4, #3
 800036c:	40bc      	lsls	r4, r7
 800036e:	43a6      	bics	r6, r4
 8000370:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000372:	6884      	ldr	r4, [r0, #8]
 8000374:	46a4      	mov	ip, r4
 8000376:	794c      	ldrb	r4, [r1, #5]
 8000378:	40bc      	lsls	r4, r7
 800037a:	4667      	mov	r7, ip
 800037c:	433c      	orrs	r4, r7
 800037e:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000380:	8884      	ldrh	r4, [r0, #4]
 8000382:	43ac      	bics	r4, r5
 8000384:	8084      	strh	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000386:	798d      	ldrb	r5, [r1, #6]
 8000388:	8884      	ldrh	r4, [r0, #4]
 800038a:	409d      	lsls	r5, r3
 800038c:	432c      	orrs	r4, r5
 800038e:	b2a4      	uxth	r4, r4
 8000390:	8084      	strh	r4, [r0, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000392:	2403      	movs	r4, #3
 8000394:	005d      	lsls	r5, r3, #1
 8000396:	40ac      	lsls	r4, r5
 8000398:	43e4      	mvns	r4, r4

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800039a:	40aa      	lsls	r2, r5
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800039c:	6807      	ldr	r7, [r0, #0]
 800039e:	4027      	ands	r7, r4
 80003a0:	6007      	str	r7, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003a2:	6807      	ldr	r7, [r0, #0]
 80003a4:	433a      	orrs	r2, r7
 80003a6:	6002      	str	r2, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80003a8:	68c2      	ldr	r2, [r0, #12]
 80003aa:	4014      	ands	r4, r2
 80003ac:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003ae:	79ca      	ldrb	r2, [r1, #7]
 80003b0:	68c4      	ldr	r4, [r0, #12]
 80003b2:	40aa      	lsls	r2, r5
 80003b4:	4322      	orrs	r2, r4
 80003b6:	60c2      	str	r2, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003b8:	3301      	adds	r3, #1
 80003ba:	2b10      	cmp	r3, #16
 80003bc:	d1c8      	bne.n	8000350 <GPIO_Init+0x8>
    }
  }
}
 80003be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080003c0 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003c0:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 80003c2:	2201      	movs	r2, #1
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003c4:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003c6:	2300      	movs	r3, #0
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 80003c8:	7142      	strb	r2, [r0, #5]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003ca:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003cc:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003ce:	71c3      	strb	r3, [r0, #7]
}
 80003d0:	4770      	bx	lr
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	0000ffff 	.word	0x0000ffff

080003d8 <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 80003d8:	2380      	movs	r3, #128	; 0x80
{
 80003da:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80003dc:	025b      	lsls	r3, r3, #9
 80003de:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80003e0:	9b01      	ldr	r3, [sp, #4]
 80003e2:	430b      	orrs	r3, r1
 80003e4:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80003e6:	9b01      	ldr	r3, [sp, #4]
 80003e8:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80003ea:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80003ec:	9b01      	ldr	r3, [sp, #4]
 80003ee:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 80003f0:	69c3      	ldr	r3, [r0, #28]
 80003f2:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 80003f4:	69c3      	ldr	r3, [r0, #28]
 80003f6:	9301      	str	r3, [sp, #4]
}
 80003f8:	b002      	add	sp, #8
 80003fa:	4770      	bx	lr

080003fc <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003fc:	8a00      	ldrh	r0, [r0, #16]
 80003fe:	4008      	ands	r0, r1
 8000400:	1e41      	subs	r1, r0, #1
 8000402:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000404:	b2c0      	uxtb	r0, r0
}
 8000406:	4770      	bx	lr

08000408 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000408:	8a00      	ldrh	r0, [r0, #16]
 800040a:	b280      	uxth	r0, r0
}
 800040c:	4770      	bx	lr

0800040e <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800040e:	8a80      	ldrh	r0, [r0, #20]
 8000410:	4008      	ands	r0, r1
 8000412:	1e41      	subs	r1, r0, #1
 8000414:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000416:	b2c0      	uxtb	r0, r0
}
 8000418:	4770      	bx	lr

0800041a <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800041a:	8a80      	ldrh	r0, [r0, #20]
 800041c:	b280      	uxth	r0, r0
}
 800041e:	4770      	bx	lr

08000420 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000420:	6181      	str	r1, [r0, #24]
}
 8000422:	4770      	bx	lr

08000424 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000424:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000426:	4770      	bx	lr

08000428 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000428:	2a00      	cmp	r2, #0
 800042a:	d001      	beq.n	8000430 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800042c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800042e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000430:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000432:	e7fc      	b.n	800042e <GPIO_WriteBit+0x6>

08000434 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000434:	8281      	strh	r1, [r0, #20]
}
 8000436:	4770      	bx	lr

08000438 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000438:	2307      	movs	r3, #7
{
 800043a:	b510      	push	{r4, lr}
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800043c:	240f      	movs	r4, #15
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800043e:	400b      	ands	r3, r1
 8000440:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000442:	409c      	lsls	r4, r3
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000444:	409a      	lsls	r2, r3
 8000446:	08c9      	lsrs	r1, r1, #3
 8000448:	0089      	lsls	r1, r1, #2
 800044a:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800044c:	6a01      	ldr	r1, [r0, #32]
 800044e:	43a1      	bics	r1, r4
 8000450:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000452:	6a01      	ldr	r1, [r0, #32]
 8000454:	430a      	orrs	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000456:	6202      	str	r2, [r0, #32]
}
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <NMI_Handler>:
 800045c:	4770      	bx	lr

0800045e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800045e:	e7fe      	b.n	800045e <HardFault_Handler>

08000460 <SVC_Handler>:
 8000460:	4770      	bx	lr

08000462 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8000462:	4770      	bx	lr

08000464 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
	u32MSTick++;
	if((u32MSTick % 1000) == 0)
 8000464:	21fa      	movs	r1, #250	; 0xfa
	u32MSTick++;
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <SysTick_Handler+0x24>)
{
 8000468:	b510      	push	{r4, lr}
	u32MSTick++;
 800046a:	681a      	ldr	r2, [r3, #0]
	if((u32MSTick % 1000) == 0)
 800046c:	0089      	lsls	r1, r1, #2
	u32MSTick++;
 800046e:	3201      	adds	r2, #1
 8000470:	601a      	str	r2, [r3, #0]
	if((u32MSTick % 1000) == 0)
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	f001 f960 	bl	8001738 <__aeabi_uidivmod>
 8000478:	2900      	cmp	r1, #0
 800047a:	d103      	bne.n	8000484 <SysTick_Handler+0x20>
	{
		u32SecTick++;
 800047c:	4a03      	ldr	r2, [pc, #12]	; (800048c <SysTick_Handler+0x28>)
 800047e:	6813      	ldr	r3, [r2, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	6013      	str	r3, [r2, #0]
	}

}
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20002260 	.word	0x20002260
 800048c:	20002264 	.word	0x20002264

08000490 <USART1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void USART1_IRQHandler(void)
{
 8000490:	b510      	push	{r4, lr}
	 if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET)
 8000492:	490b      	ldr	r1, [pc, #44]	; (80004c0 <USART1_IRQHandler+0x30>)
 8000494:	480b      	ldr	r0, [pc, #44]	; (80004c4 <USART1_IRQHandler+0x34>)
 8000496:	f000 fdfb 	bl	8001090 <USART_GetITStatus>
 800049a:	2801      	cmp	r0, #1
 800049c:	d106      	bne.n	80004ac <USART1_IRQHandler+0x1c>
	 {
		 Serial_RxCallback(eSerial_Debug, (uint8_t)USART_ReceiveData(USART1));
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <USART1_IRQHandler+0x34>)
 80004a0:	f000 fcec 	bl	8000e7c <USART_ReceiveData>
 80004a4:	b2c1      	uxtb	r1, r0
 80004a6:	2000      	movs	r0, #0
 80004a8:	f001 f84c 	bl	8001544 <Serial_RxCallback>
	 }

	 if (USART_GetITStatus(USART1, USART_IT_TXE) == SET)
 80004ac:	4906      	ldr	r1, [pc, #24]	; (80004c8 <USART1_IRQHandler+0x38>)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <USART1_IRQHandler+0x34>)
 80004b0:	f000 fdee 	bl	8001090 <USART_GetITStatus>
 80004b4:	2801      	cmp	r0, #1
 80004b6:	d102      	bne.n	80004be <USART1_IRQHandler+0x2e>
	 {
		 Serial_TxCallback(eSerial_Debug);
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 ffe9 	bl	8001490 <Serial_TxCallback>
	 }
}
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	00050105 	.word	0x00050105
 80004c4:	40013800 	.word	0x40013800
 80004c8:	00070107 	.word	0x00070107

080004cc <USART3_8_IRQHandler>:

void USART3_8_IRQHandler(void)
{
 80004cc:	b510      	push	{r4, lr}
	 if (USART_GetITStatus(USART4, USART_IT_RXNE) == SET)
 80004ce:	4915      	ldr	r1, [pc, #84]	; (8000524 <USART3_8_IRQHandler+0x58>)
 80004d0:	4815      	ldr	r0, [pc, #84]	; (8000528 <USART3_8_IRQHandler+0x5c>)
 80004d2:	f000 fddd 	bl	8001090 <USART_GetITStatus>
 80004d6:	0004      	movs	r4, r0
 80004d8:	2801      	cmp	r0, #1
 80004da:	d10f      	bne.n	80004fc <USART3_8_IRQHandler+0x30>
	 {
		 Serial_RxCallback(eSerial_GSM, (uint8_t)USART_ReceiveData(USART4));
 80004dc:	4812      	ldr	r0, [pc, #72]	; (8000528 <USART3_8_IRQHandler+0x5c>)
 80004de:	f000 fccd 	bl	8000e7c <USART_ReceiveData>
 80004e2:	b2c1      	uxtb	r1, r0
 80004e4:	0020      	movs	r0, r4
	 }
	 else if (USART_GetITStatus(USART3, USART_IT_RXNE) == SET)
	 {
		 Serial_RxCallback(eSerial_Modbus, (uint8_t)USART_ReceiveData(USART3));
 80004e6:	f001 f82d 	bl	8001544 <Serial_RxCallback>
	 }

	 if (USART_GetITStatus(USART4, USART_IT_TXE) == SET)
 80004ea:	4910      	ldr	r1, [pc, #64]	; (800052c <USART3_8_IRQHandler+0x60>)
 80004ec:	480e      	ldr	r0, [pc, #56]	; (8000528 <USART3_8_IRQHandler+0x5c>)
 80004ee:	f000 fdcf 	bl	8001090 <USART_GetITStatus>
 80004f2:	2801      	cmp	r0, #1
 80004f4:	d10e      	bne.n	8000514 <USART3_8_IRQHandler+0x48>
	 {
		 Serial_TxCallback(eSerial_GSM);
	 }
	 else if (USART_GetITStatus(USART3, USART_IT_TXE) == SET)
	 {
		 Serial_TxCallback(eSerial_Modbus);
 80004f6:	f000 ffcb 	bl	8001490 <Serial_TxCallback>
	 }
}
 80004fa:	bd10      	pop	{r4, pc}
	 else if (USART_GetITStatus(USART3, USART_IT_RXNE) == SET)
 80004fc:	4909      	ldr	r1, [pc, #36]	; (8000524 <USART3_8_IRQHandler+0x58>)
 80004fe:	480c      	ldr	r0, [pc, #48]	; (8000530 <USART3_8_IRQHandler+0x64>)
 8000500:	f000 fdc6 	bl	8001090 <USART_GetITStatus>
 8000504:	2801      	cmp	r0, #1
 8000506:	d1f0      	bne.n	80004ea <USART3_8_IRQHandler+0x1e>
		 Serial_RxCallback(eSerial_Modbus, (uint8_t)USART_ReceiveData(USART3));
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <USART3_8_IRQHandler+0x64>)
 800050a:	f000 fcb7 	bl	8000e7c <USART_ReceiveData>
 800050e:	b2c1      	uxtb	r1, r0
 8000510:	2002      	movs	r0, #2
 8000512:	e7e8      	b.n	80004e6 <USART3_8_IRQHandler+0x1a>
	 else if (USART_GetITStatus(USART3, USART_IT_TXE) == SET)
 8000514:	4905      	ldr	r1, [pc, #20]	; (800052c <USART3_8_IRQHandler+0x60>)
 8000516:	4806      	ldr	r0, [pc, #24]	; (8000530 <USART3_8_IRQHandler+0x64>)
 8000518:	f000 fdba 	bl	8001090 <USART_GetITStatus>
 800051c:	2801      	cmp	r0, #1
 800051e:	d1ec      	bne.n	80004fa <USART3_8_IRQHandler+0x2e>
		 Serial_TxCallback(eSerial_Modbus);
 8000520:	3001      	adds	r0, #1
 8000522:	e7e8      	b.n	80004f6 <USART3_8_IRQHandler+0x2a>
 8000524:	00050105 	.word	0x00050105
 8000528:	40004c00 	.word	0x40004c00
 800052c:	00070107 	.word	0x00070107
 8000530:	40004800 	.word	0x40004800

08000534 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000534:	2101      	movs	r1, #1
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <RCC_DeInit+0x48>)
#if defined (STM32F051)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000538:	4811      	ldr	r0, [pc, #68]	; (8000580 <RCC_DeInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	430a      	orrs	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000540:	685a      	ldr	r2, [r3, #4]
 8000542:	4002      	ands	r2, r0
 8000544:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	480e      	ldr	r0, [pc, #56]	; (8000584 <RCC_DeInit+0x50>)
 800054a:	4002      	ands	r2, r0
 800054c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <RCC_DeInit+0x54>)
 8000552:	4002      	ands	r2, r0
 8000554:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <RCC_DeInit+0x58>)
 800055a:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800055c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800055e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000562:	4382      	bics	r2, r0
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 8000566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000568:	4809      	ldr	r0, [pc, #36]	; (8000590 <RCC_DeInit+0x5c>)
 800056a:	4002      	ands	r2, r0
 800056c:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800056e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000570:	438a      	bics	r2, r1
 8000572:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
}
 8000578:	4770      	bx	lr
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40021000 	.word	0x40021000
 8000580:	08ffb80c 	.word	0x08ffb80c
 8000584:	fef6ffff 	.word	0xfef6ffff
 8000588:	fffbffff 	.word	0xfffbffff
 800058c:	ffc0ffff 	.word	0xffc0ffff
 8000590:	fff0feac 	.word	0xfff0feac

08000594 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8000594:	2200      	movs	r2, #0
 8000596:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <RCC_HSEConfig+0xc>)
 8000598:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 800059a:	7018      	strb	r0, [r3, #0]

}
 800059c:	4770      	bx	lr
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40021002 	.word	0x40021002

080005a4 <RCC_AdjustHSICalibrationValue>:
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80005a4:	21f8      	movs	r1, #248	; 0xf8
  tmpreg = RCC->CR;
 80005a6:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80005a8:	00c0      	lsls	r0, r0, #3
  tmpreg = RCC->CR;
 80005aa:	6813      	ldr	r3, [r2, #0]
  tmpreg &= ~RCC_CR_HSITRIM;
 80005ac:	438b      	bics	r3, r1
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80005ae:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR = tmpreg;
 80005b0:	6010      	str	r0, [r2, #0]
}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000

080005b8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <RCC_HSICmd+0x18>)
 80005ba:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 80005bc:	6819      	ldr	r1, [r3, #0]
  if (NewState != DISABLE)
 80005be:	2800      	cmp	r0, #0
 80005c0:	d002      	beq.n	80005c8 <RCC_HSICmd+0x10>
    RCC->CR |= RCC_CR_HSION;
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
  }
}
 80005c6:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_HSION;
 80005c8:	4391      	bics	r1, r2
 80005ca:	6019      	str	r1, [r3, #0]
}
 80005cc:	e7fb      	b.n	80005c6 <RCC_HSICmd+0xe>
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000

080005d4 <RCC_AdjustHSI14CalibrationValue>:
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 80005d4:	21f8      	movs	r1, #248	; 0xf8
  tmpreg = RCC->CR2;
 80005d6:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 80005d8:	00c0      	lsls	r0, r0, #3
  tmpreg = RCC->CR2;
 80005da:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 80005dc:	438b      	bics	r3, r1
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 80005de:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR2 = tmpreg;
 80005e0:	6350      	str	r0, [r2, #52]	; 0x34
}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <RCC_HSI14Cmd>:
  * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSI14Cmd(FunctionalState NewState)
{
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <RCC_HSI14Cmd+0x18>)
 80005ea:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 80005ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
  if (NewState != DISABLE)
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d002      	beq.n	80005f8 <RCC_HSI14Cmd+0x10>
    RCC->CR2 |= RCC_CR2_HSI14ON;
 80005f2:	430a      	orrs	r2, r1
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
  }
}
 80005f6:	4770      	bx	lr
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 80005f8:	4391      	bics	r1, r2
 80005fa:	6359      	str	r1, [r3, #52]	; 0x34
}
 80005fc:	e7fb      	b.n	80005f6 <RCC_HSI14Cmd+0xe>
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40021000 	.word	0x40021000

08000604 <RCC_HSI14ADCRequestCmd>:
  * @param  NewState: new state of the HSI14 ADC request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <RCC_HSI14ADCRequestCmd+0x18>)
 8000606:	2204      	movs	r2, #4
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8000608:	6b59      	ldr	r1, [r3, #52]	; 0x34
  if (NewState != DISABLE)
 800060a:	2800      	cmp	r0, #0
 800060c:	d002      	beq.n	8000614 <RCC_HSI14ADCRequestCmd+0x10>
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 800060e:	4391      	bics	r1, r2
 8000610:	6359      	str	r1, [r3, #52]	; 0x34
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
  }
}
 8000612:	4770      	bx	lr
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000618:	e7fb      	b.n	8000612 <RCC_HSI14ADCRequestCmd+0xe>
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40021000 	.word	0x40021000

08000620 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8000620:	2101      	movs	r1, #1
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <RCC_LSEConfig+0x1c>)
 8000624:	6a1a      	ldr	r2, [r3, #32]
 8000626:	438a      	bics	r2, r1
 8000628:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 800062a:	6a1a      	ldr	r2, [r3, #32]
 800062c:	3103      	adds	r1, #3
 800062e:	438a      	bics	r2, r1
 8000630:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8000632:	6a1a      	ldr	r2, [r3, #32]
 8000634:	4310      	orrs	r0, r2
 8000636:	6218      	str	r0, [r3, #32]
}
 8000638:	4770      	bx	lr
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40021000 	.word	0x40021000

08000640 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8000640:	2118      	movs	r1, #24
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <RCC_LSEDriveConfig+0x14>)
 8000644:	6a1a      	ldr	r2, [r3, #32]
 8000646:	438a      	bics	r2, r1
 8000648:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 800064a:	6a1a      	ldr	r2, [r3, #32]
 800064c:	4310      	orrs	r0, r2
 800064e:	6218      	str	r0, [r3, #32]
}
 8000650:	4770      	bx	lr
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40021000 	.word	0x40021000

08000658 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <RCC_LSICmd+0x18>)
 800065a:	2201      	movs	r2, #1
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 800065c:	6a59      	ldr	r1, [r3, #36]	; 0x24
  if (NewState != DISABLE)
 800065e:	2800      	cmp	r0, #0
 8000660:	d002      	beq.n	8000668 <RCC_LSICmd+0x10>
    RCC->CSR |= RCC_CSR_LSION;
 8000662:	430a      	orrs	r2, r1
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
  }
}
 8000666:	4770      	bx	lr
    RCC->CSR &= ~RCC_CSR_LSION;
 8000668:	4391      	bics	r1, r2
 800066a:	6259      	str	r1, [r3, #36]	; 0x24
}
 800066c:	e7fb      	b.n	8000666 <RCC_LSICmd+0xe>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40021000 	.word	0x40021000

08000674 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <RCC_PLLConfig+0x18>)
{
 8000676:	b510      	push	{r4, lr}
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000678:	6853      	ldr	r3, [r2, #4]
 800067a:	4c05      	ldr	r4, [pc, #20]	; (8000690 <RCC_PLLConfig+0x1c>)
 800067c:	4023      	ands	r3, r4
 800067e:	6053      	str	r3, [r2, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 8000680:	6853      	ldr	r3, [r2, #4]
 8000682:	4319      	orrs	r1, r3
 8000684:	4308      	orrs	r0, r1
 8000686:	6050      	str	r0, [r2, #4]
}
 8000688:	bd10      	pop	{r4, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40021000 	.word	0x40021000
 8000690:	ffc27fff 	.word	0xffc27fff

08000694 <RCC_PLLCmd>:
  * @param  NewState: new state of the PLL.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <RCC_PLLCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000696:	2800      	cmp	r0, #0
 8000698:	d005      	beq.n	80006a6 <RCC_PLLCmd+0x12>
  {
    RCC->CR |= RCC_CR_PLLON;
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	6819      	ldr	r1, [r3, #0]
 800069e:	0452      	lsls	r2, r2, #17
 80006a0:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 80006a2:	601a      	str	r2, [r3, #0]
  }
}
 80006a4:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_PLLON;
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4902      	ldr	r1, [pc, #8]	; (80006b4 <RCC_PLLCmd+0x20>)
 80006aa:	400a      	ands	r2, r1
 80006ac:	e7f9      	b.n	80006a2 <RCC_PLLCmd+0xe>
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	40021000 	.word	0x40021000
 80006b4:	feffffff 	.word	0xfeffffff

080006b8 <RCC_HSI48Cmd>:
  * @param  NewState: new state of the HSI48.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSI48Cmd(FunctionalState NewState)
{
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <RCC_HSI48Cmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d005      	beq.n	80006ca <RCC_HSI48Cmd+0x12>
  {
    RCC->CR2 |= RCC_CR2_HSI48ON;
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006c2:	0252      	lsls	r2, r2, #9
 80006c4:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI48ON;
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80006c8:	4770      	bx	lr
    RCC->CR2 &= ~RCC_CR2_HSI48ON;
 80006ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006cc:	4902      	ldr	r1, [pc, #8]	; (80006d8 <RCC_HSI48Cmd+0x20>)
 80006ce:	400a      	ands	r2, r1
 80006d0:	e7f9      	b.n	80006c6 <RCC_HSI48Cmd+0xe>
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40021000 	.word	0x40021000
 80006d8:	fffeffff 	.word	0xfffeffff

080006dc <RCC_PREDIV1Config>:
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80006dc:	210f      	movs	r1, #15
  tmpreg = RCC->CFGR2;
 80006de:	4a03      	ldr	r2, [pc, #12]	; (80006ec <RCC_PREDIV1Config+0x10>)
 80006e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80006e2:	438b      	bics	r3, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 80006e4:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80006e6:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 80006e8:	4770      	bx	lr
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <RCC_ClockSecuritySystemCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d005      	beq.n	8000702 <RCC_ClockSecuritySystemCmd+0x12>
  {
    RCC->CR |= RCC_CR_CSSON;
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	0312      	lsls	r2, r2, #12
 80006fc:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 80006fe:	601a      	str	r2, [r3, #0]
  }
}
 8000700:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_CSSON;
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4902      	ldr	r1, [pc, #8]	; (8000710 <RCC_ClockSecuritySystemCmd+0x20>)
 8000706:	400a      	ands	r2, r1
 8000708:	e7f9      	b.n	80006fe <RCC_ClockSecuritySystemCmd+0xe>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40021000 	.word	0x40021000
 8000710:	fff7ffff 	.word	0xfff7ffff

08000714 <RCC_MCOConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
  assert_param(IS_RCC_MCO_PRESCALER(RCC_MCOPrescaler));
    
  /* Get CFGR value */  
  tmpreg = RCC->CFGR;
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <RCC_MCOConfig+0x14>)
  /* Clear MCOPRE[2:0] bits */
  tmpreg &= ~(RCC_CFGR_MCO_PRE | RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
  /* Set the RCC_MCOSource and RCC_MCOPrescaler */
  tmpreg |= (RCC_MCOPrescaler | ((uint32_t)RCC_MCOSource<<24));
 8000716:	0600      	lsls	r0, r0, #24
  tmpreg = RCC->CFGR;
 8000718:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~(RCC_CFGR_MCO_PRE | RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	4319      	orrs	r1, r3
  tmpreg |= (RCC_MCOPrescaler | ((uint32_t)RCC_MCOSource<<24));
 8000720:	4301      	orrs	r1, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000722:	6051      	str	r1, [r2, #4]
}
 8000724:	4770      	bx	lr
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000

0800072c <RCC_SYSCLKConfig>:
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800072c:	2103      	movs	r1, #3
  tmpreg = RCC->CFGR;
 800072e:	4a03      	ldr	r2, [pc, #12]	; (800073c <RCC_SYSCLKConfig+0x10>)
 8000730:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_SW;
 8000732:	438b      	bics	r3, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000734:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000736:	6050      	str	r0, [r2, #4]
}
 8000738:	4770      	bx	lr
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000

08000740 <RCC_GetSYSCLKSource>:
  *           - 0x08: PLL used as system clock
  *           - 0x0C: HSI48 used as system clock, applicable only for STM32F072 devices  
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <RCC_GetSYSCLKSource+0xc>)
 8000742:	6858      	ldr	r0, [r3, #4]
 8000744:	230c      	movs	r3, #12
 8000746:	4018      	ands	r0, r3
}
 8000748:	4770      	bx	lr
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40021000 	.word	0x40021000

08000750 <RCC_HCLKConfig>:
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000750:	21f0      	movs	r1, #240	; 0xf0
  tmpreg = RCC->CFGR;
 8000752:	4a03      	ldr	r2, [pc, #12]	; (8000760 <RCC_HCLKConfig+0x10>)
 8000754:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_HPRE;
 8000756:	438b      	bics	r3, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000758:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800075a:	6050      	str	r0, [r2, #4]
}
 800075c:	4770      	bx	lr
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40021000 	.word	0x40021000

08000764 <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 8000766:	4904      	ldr	r1, [pc, #16]	; (8000778 <RCC_PCLKConfig+0x14>)
  tmpreg = RCC->CFGR;
 8000768:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_PPRE;
 800076a:	400b      	ands	r3, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800076c:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800076e:	6050      	str	r0, [r2, #4]
}
 8000770:	4770      	bx	lr
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000
 8000778:	fffff8ff 	.word	0xfffff8ff

0800077c <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <RCC_ADCCLKConfig+0x24>)
 800077e:	4909      	ldr	r1, [pc, #36]	; (80007a4 <RCC_ADCCLKConfig+0x28>)
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	400a      	ands	r2, r1
 8000784:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 8000786:	6859      	ldr	r1, [r3, #4]
 8000788:	b282      	uxth	r2, r0
 800078a:	430a      	orrs	r2, r1
 800078c:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 800078e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000790:	4905      	ldr	r1, [pc, #20]	; (80007a8 <RCC_ADCCLKConfig+0x2c>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000792:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000794:	400a      	ands	r2, r1
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079a:	4310      	orrs	r0, r2
 800079c:	6318      	str	r0, [r3, #48]	; 0x30
}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	ffffbfff 	.word	0xffffbfff
 80007a8:	fffffeff 	.word	0xfffffeff

080007ac <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 80007ac:	2140      	movs	r1, #64	; 0x40
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <RCC_CECCLKConfig+0x14>)
 80007b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b2:	438a      	bics	r2, r1
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 80007b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b8:	4310      	orrs	r0, r2
 80007ba:	6318      	str	r0, [r3, #48]	; 0x30
}
 80007bc:	4770      	bx	lr
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80007c4:	2110      	movs	r1, #16
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <RCC_I2CCLKConfig+0x14>)
 80007c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ca:	438a      	bics	r2, r1
 80007cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 80007ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d0:	4310      	orrs	r0, r2
 80007d2:	6318      	str	r0, [r3, #48]	; 0x30
}
 80007d4:	4770      	bx	lr
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000

080007dc <RCC_USARTCLKConfig>:
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Get USART index */
  tmp = (RCC_USARTCLK >> 28);
 80007dc:	0f02      	lsrs	r2, r0, #28
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <RCC_USARTCLKConfig+0x2c>)

  /* Clear USARTSW[1:0] bit */
  if (tmp == (uint32_t)0x00000001)
 80007e0:	2a01      	cmp	r2, #1
 80007e2:	d107      	bne.n	80007f4 <RCC_USARTCLKConfig+0x18>
  {
    /* Clear USART1SW[1:0] bit */  
    RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80007e4:	2103      	movs	r1, #3
 80007e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e8:	438a      	bics	r2, r1
    RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
  }
  else 
  {
    /* Clear USART3SW[1:0] bit */
    RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Set USARTxSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 80007ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ee:	4310      	orrs	r0, r2
 80007f0:	6318      	str	r0, [r3, #48]	; 0x30
}
 80007f2:	4770      	bx	lr
  else if (tmp == (uint32_t)0x00000002)
 80007f4:	2a02      	cmp	r2, #2
 80007f6:	d103      	bne.n	8000800 <RCC_USARTCLKConfig+0x24>
    RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 80007f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007fa:	4904      	ldr	r1, [pc, #16]	; (800080c <RCC_USARTCLKConfig+0x30>)
    RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 80007fc:	400a      	ands	r2, r1
 80007fe:	e7f4      	b.n	80007ea <RCC_USARTCLKConfig+0xe>
 8000800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000802:	4903      	ldr	r1, [pc, #12]	; (8000810 <RCC_USARTCLKConfig+0x34>)
 8000804:	e7fa      	b.n	80007fc <RCC_USARTCLKConfig+0x20>
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40021000 	.word	0x40021000
 800080c:	fffcffff 	.word	0xfffcffff
 8000810:	fff3ffff 	.word	0xfff3ffff

08000814 <RCC_USBCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK(RCC_USBCLK));

  /* Clear USBSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USBSW;
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <RCC_USBCLKConfig+0x14>)
 8000818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800081a:	438a      	bics	r2, r1
 800081c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USBSW bits according to RCC_USBCLK value */
  RCC->CFGR3 |= RCC_USBCLK;
 800081e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000820:	4310      	orrs	r0, r2
 8000822:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000824:	4770      	bx	lr
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40021000 	.word	0x40021000

0800082c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	0004      	movs	r4, r0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000830:	200c      	movs	r0, #12
 8000832:	4d58      	ldr	r5, [pc, #352]	; (8000994 <RCC_GetClocksFreq+0x168>)
 8000834:	686b      	ldr	r3, [r5, #4]
 8000836:	4003      	ands	r3, r0
  
  switch (tmp)
 8000838:	0018      	movs	r0, r3
 800083a:	f000 feed 	bl	8001618 <__gnu_thumb1_case_uqi>
 800083e:	5507      	.short	0x5507
 8000840:	55555555 	.word	0x55555555
 8000844:	553a5555 	.word	0x553a5555
 8000848:	5555      	.short	0x5555
 800084a:	51          	.byte	0x51
 800084b:	00          	.byte	0x00
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800084c:	4a52      	ldr	r2, [pc, #328]	; (8000998 <RCC_GetClocksFreq+0x16c>)
 800084e:	6022      	str	r2, [r4, #0]
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000850:	6820      	ldr	r0, [r4, #0]
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000852:	686a      	ldr	r2, [r5, #4]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000854:	0001      	movs	r1, r0
  presc = APBAHBPrescTable[tmp]; 
 8000856:	4e51      	ldr	r6, [pc, #324]	; (800099c <RCC_GetClocksFreq+0x170>)
  tmp = tmp >> 4;
 8000858:	0612      	lsls	r2, r2, #24
 800085a:	0f12      	lsrs	r2, r2, #28
  presc = APBAHBPrescTable[tmp]; 
 800085c:	5cb2      	ldrb	r2, [r6, r2]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800085e:	40d1      	lsrs	r1, r2
 8000860:	000a      	movs	r2, r1
 8000862:	6061      	str	r1, [r4, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8000864:	6869      	ldr	r1, [r5, #4]
  tmp = tmp >> 8;
 8000866:	0549      	lsls	r1, r1, #21
 8000868:	0f49      	lsrs	r1, r1, #29
  presc = APBAHBPrescTable[tmp];
 800086a:	5c71      	ldrb	r1, [r6, r1]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800086c:	40ca      	lsrs	r2, r1
 800086e:	60a2      	str	r2, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8000870:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000872:	05c9      	lsls	r1, r1, #23
 8000874:	d43a      	bmi.n	80008ec <RCC_GetClocksFreq+0xc0>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8000876:	494a      	ldr	r1, [pc, #296]	; (80009a0 <RCC_GetClocksFreq+0x174>)
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8000878:	60e1      	str	r1, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 800087a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800087c:	0649      	lsls	r1, r1, #25
 800087e:	d43c      	bmi.n	80008fa <RCC_GetClocksFreq+0xce>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8000880:	4948      	ldr	r1, [pc, #288]	; (80009a4 <RCC_GetClocksFreq+0x178>)
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000882:	6121      	str	r1, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000884:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000886:	06c9      	lsls	r1, r1, #27
 8000888:	d43a      	bmi.n	8000900 <RCC_GetClocksFreq+0xd4>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800088a:	4943      	ldr	r1, [pc, #268]	; (8000998 <RCC_GetClocksFreq+0x16c>)
 800088c:	6161      	str	r1, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800088e:	2103      	movs	r1, #3
 8000890:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8000892:	420e      	tst	r6, r1
 8000894:	d136      	bne.n	8000904 <RCC_GetClocksFreq+0xd8>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000896:	61a2      	str	r2, [r4, #24]
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000898:	21c0      	movs	r1, #192	; 0xc0
 800089a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800089c:	0289      	lsls	r1, r1, #10
 800089e:	420e      	tst	r6, r1
 80008a0:	d144      	bne.n	800092c <RCC_GetClocksFreq+0x100>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80008a2:	61e2      	str	r2, [r4, #28]
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
  }
  
  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80008a4:	21c0      	movs	r1, #192	; 0xc0
 80008a6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80008a8:	0309      	lsls	r1, r1, #12
 80008aa:	420e      	tst	r6, r1
 80008ac:	d156      	bne.n	800095c <RCC_GetClocksFreq+0x130>
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80008ae:	6222      	str	r2, [r4, #32]
 80008b0:	e05b      	b.n	800096a <RCC_GetClocksFreq+0x13e>
      pllmull = ( pllmull >> 18) + 2;
 80008b2:	220f      	movs	r2, #15
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80008b4:	686b      	ldr	r3, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80008b6:	6869      	ldr	r1, [r5, #4]
      pllmull = ( pllmull >> 18) + 2;
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	4013      	ands	r3, r2
 80008bc:	1c9e      	adds	r6, r3, #2
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80008be:	23c0      	movs	r3, #192	; 0xc0
 80008c0:	025b      	lsls	r3, r3, #9
      if (pllsource == 0x00)
 80008c2:	4219      	tst	r1, r3
 80008c4:	d103      	bne.n	80008ce <RCC_GetClocksFreq+0xa2>
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <RCC_GetClocksFreq+0x17c>)
 80008c8:	4373      	muls	r3, r6
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80008ca:	6023      	str	r3, [r4, #0]
      break;
 80008cc:	e7c0      	b.n	8000850 <RCC_GetClocksFreq+0x24>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80008ce:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80008d0:	4831      	ldr	r0, [pc, #196]	; (8000998 <RCC_GetClocksFreq+0x16c>)
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80008d2:	4011      	ands	r1, r2
 80008d4:	3101      	adds	r1, #1
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80008d6:	f000 fea9 	bl	800162c <__udivsi3>
 80008da:	0033      	movs	r3, r6
 80008dc:	4343      	muls	r3, r0
 80008de:	e7f4      	b.n	80008ca <RCC_GetClocksFreq+0x9e>
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 80008e0:	4b32      	ldr	r3, [pc, #200]	; (80009ac <RCC_GetClocksFreq+0x180>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008e2:	6023      	str	r3, [r4, #0]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80008e4:	2300      	movs	r3, #0
      break;
 80008e6:	e7b3      	b.n	8000850 <RCC_GetClocksFreq+0x24>
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008e8:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <RCC_GetClocksFreq+0x16c>)
 80008ea:	e7fa      	b.n	80008e2 <RCC_GetClocksFreq+0xb6>
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 80008ec:	6869      	ldr	r1, [r5, #4]
 80008ee:	0449      	lsls	r1, r1, #17
 80008f0:	d401      	bmi.n	80008f6 <RCC_GetClocksFreq+0xca>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 80008f2:	0851      	lsrs	r1, r2, #1
 80008f4:	e7c0      	b.n	8000878 <RCC_GetClocksFreq+0x4c>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80008f6:	0891      	lsrs	r1, r2, #2
 80008f8:	e7be      	b.n	8000878 <RCC_GetClocksFreq+0x4c>
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	0209      	lsls	r1, r1, #8
 80008fe:	e7c0      	b.n	8000882 <RCC_GetClocksFreq+0x56>
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000900:	6160      	str	r0, [r4, #20]
 8000902:	e7c4      	b.n	800088e <RCC_GetClocksFreq+0x62>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000904:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8000906:	400e      	ands	r6, r1
 8000908:	2e01      	cmp	r6, #1
 800090a:	d101      	bne.n	8000910 <RCC_GetClocksFreq+0xe4>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800090c:	61a0      	str	r0, [r4, #24]
 800090e:	e7c3      	b.n	8000898 <RCC_GetClocksFreq+0x6c>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000910:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8000912:	400e      	ands	r6, r1
 8000914:	2e02      	cmp	r6, #2
 8000916:	d103      	bne.n	8000920 <RCC_GetClocksFreq+0xf4>
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	0209      	lsls	r1, r1, #8
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800091c:	61a1      	str	r1, [r4, #24]
 800091e:	e7bb      	b.n	8000898 <RCC_GetClocksFreq+0x6c>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000920:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8000922:	4031      	ands	r1, r6
 8000924:	2903      	cmp	r1, #3
 8000926:	d1b7      	bne.n	8000898 <RCC_GetClocksFreq+0x6c>
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000928:	491b      	ldr	r1, [pc, #108]	; (8000998 <RCC_GetClocksFreq+0x16c>)
 800092a:	e7f7      	b.n	800091c <RCC_GetClocksFreq+0xf0>
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800092c:	2780      	movs	r7, #128	; 0x80
 800092e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8000930:	027f      	lsls	r7, r7, #9
 8000932:	400e      	ands	r6, r1
 8000934:	42be      	cmp	r6, r7
 8000936:	d101      	bne.n	800093c <RCC_GetClocksFreq+0x110>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000938:	61e0      	str	r0, [r4, #28]
 800093a:	e7b3      	b.n	80008a4 <RCC_GetClocksFreq+0x78>
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800093c:	2780      	movs	r7, #128	; 0x80
 800093e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8000940:	02bf      	lsls	r7, r7, #10
 8000942:	400e      	ands	r6, r1
 8000944:	42be      	cmp	r6, r7
 8000946:	d103      	bne.n	8000950 <RCC_GetClocksFreq+0x124>
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	0209      	lsls	r1, r1, #8
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800094c:	61e1      	str	r1, [r4, #28]
 800094e:	e7a9      	b.n	80008a4 <RCC_GetClocksFreq+0x78>
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000950:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8000952:	400e      	ands	r6, r1
 8000954:	428e      	cmp	r6, r1
 8000956:	d1a5      	bne.n	80008a4 <RCC_GetClocksFreq+0x78>
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000958:	490f      	ldr	r1, [pc, #60]	; (8000998 <RCC_GetClocksFreq+0x16c>)
 800095a:	e7f7      	b.n	800094c <RCC_GetClocksFreq+0x120>
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800095c:	2680      	movs	r6, #128	; 0x80
 800095e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000960:	02f6      	lsls	r6, r6, #11
 8000962:	400a      	ands	r2, r1
 8000964:	42b2      	cmp	r2, r6
 8000966:	d106      	bne.n	8000976 <RCC_GetClocksFreq+0x14a>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000968:	6220      	str	r0, [r4, #32]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 800096a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800096c:	0612      	lsls	r2, r2, #24
 800096e:	d400      	bmi.n	8000972 <RCC_GetClocksFreq+0x146>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <RCC_GetClocksFreq+0x180>)
  }
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
 8000972:	6263      	str	r3, [r4, #36]	; 0x24
  }   
}
 8000974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000976:	2080      	movs	r0, #128	; 0x80
 8000978:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800097a:	0300      	lsls	r0, r0, #12
 800097c:	400a      	ands	r2, r1
 800097e:	4282      	cmp	r2, r0
 8000980:	d102      	bne.n	8000988 <RCC_GetClocksFreq+0x15c>
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	0212      	lsls	r2, r2, #8
 8000986:	e792      	b.n	80008ae <RCC_GetClocksFreq+0x82>
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000988:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800098a:	400a      	ands	r2, r1
 800098c:	428a      	cmp	r2, r1
 800098e:	d1ec      	bne.n	800096a <RCC_GetClocksFreq+0x13e>
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000990:	4a01      	ldr	r2, [pc, #4]	; (8000998 <RCC_GetClocksFreq+0x16c>)
 8000992:	e78c      	b.n	80008ae <RCC_GetClocksFreq+0x82>
 8000994:	40021000 	.word	0x40021000
 8000998:	007a1200 	.word	0x007a1200
 800099c:	20000014 	.word	0x20000014
 80009a0:	00d59f80 	.word	0x00d59f80
 80009a4:	00008012 	.word	0x00008012
 80009a8:	003d0900 	.word	0x003d0900
 80009ac:	02dc6c00 	.word	0x02dc6c00

080009b0 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80009b0:	4a02      	ldr	r2, [pc, #8]	; (80009bc <RCC_RTCCLKConfig+0xc>)
 80009b2:	6a13      	ldr	r3, [r2, #32]
 80009b4:	4318      	orrs	r0, r3
 80009b6:	6210      	str	r0, [r2, #32]
}
 80009b8:	4770      	bx	lr
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	40021000 	.word	0x40021000

080009c0 <RCC_RTCCLKCmd>:
  * @param  NewState: new state of the RTC clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <RCC_RTCCLKCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d005      	beq.n	80009d2 <RCC_RTCCLKCmd+0x12>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	6a19      	ldr	r1, [r3, #32]
 80009ca:	0212      	lsls	r2, r2, #8
 80009cc:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 80009ce:	621a      	str	r2, [r3, #32]
  }
}
 80009d0:	4770      	bx	lr
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 80009d2:	6a1a      	ldr	r2, [r3, #32]
 80009d4:	4902      	ldr	r1, [pc, #8]	; (80009e0 <RCC_RTCCLKCmd+0x20>)
 80009d6:	400a      	ands	r2, r1
 80009d8:	e7f9      	b.n	80009ce <RCC_RTCCLKCmd+0xe>
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000
 80009e0:	ffff7fff 	.word	0xffff7fff

080009e4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <RCC_BackupResetCmd+0x1c>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d005      	beq.n	80009f6 <RCC_BackupResetCmd+0x12>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 80009ea:	2280      	movs	r2, #128	; 0x80
 80009ec:	6a19      	ldr	r1, [r3, #32]
 80009ee:	0252      	lsls	r2, r2, #9
 80009f0:	430a      	orrs	r2, r1
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 80009f2:	621a      	str	r2, [r3, #32]
  }
}
 80009f4:	4770      	bx	lr
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 80009f6:	6a1a      	ldr	r2, [r3, #32]
 80009f8:	4902      	ldr	r1, [pc, #8]	; (8000a04 <RCC_BackupResetCmd+0x20>)
 80009fa:	400a      	ands	r2, r1
 80009fc:	e7f9      	b.n	80009f2 <RCC_BackupResetCmd+0xe>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40021000 	.word	0x40021000
 8000a04:	fffeffff 	.word	0xfffeffff

08000a08 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000a0a:	695a      	ldr	r2, [r3, #20]
  if (NewState != DISABLE)
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d002      	beq.n	8000a16 <RCC_AHBPeriphClockCmd+0xe>
    RCC->AHBENR |= RCC_AHBPeriph;
 8000a10:	4310      	orrs	r0, r2
 8000a12:	6158      	str	r0, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000a14:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000a16:	4382      	bics	r2, r0
 8000a18:	615a      	str	r2, [r3, #20]
}
 8000a1a:	e7fb      	b.n	8000a14 <RCC_AHBPeriphClockCmd+0xc>
 8000a1c:	40021000 	.word	0x40021000

08000a20 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a22:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 8000a24:	2900      	cmp	r1, #0
 8000a26:	d002      	beq.n	8000a2e <RCC_APB2PeriphClockCmd+0xe>
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a28:	4310      	orrs	r0, r2
 8000a2a:	6198      	str	r0, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000a2c:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a2e:	4382      	bics	r2, r0
 8000a30:	619a      	str	r2, [r3, #24]
}
 8000a32:	e7fb      	b.n	8000a2c <RCC_APB2PeriphClockCmd+0xc>
 8000a34:	40021000 	.word	0x40021000

08000a38 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a3a:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	d002      	beq.n	8000a46 <RCC_APB1PeriphClockCmd+0xe>
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a40:	4310      	orrs	r0, r2
 8000a42:	61d8      	str	r0, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000a44:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000a46:	4382      	bics	r2, r0
 8000a48:	61da      	str	r2, [r3, #28]
}
 8000a4a:	e7fb      	b.n	8000a44 <RCC_APB1PeriphClockCmd+0xc>
 8000a4c:	40021000 	.word	0x40021000

08000a50 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <RCC_AHBPeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  if (NewState != DISABLE)
 8000a54:	2900      	cmp	r1, #0
 8000a56:	d002      	beq.n	8000a5e <RCC_AHBPeriphResetCmd+0xe>
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000a58:	4310      	orrs	r0, r2
 8000a5a:	6298      	str	r0, [r3, #40]	; 0x28
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
  }
}
 8000a5c:	4770      	bx	lr
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000a5e:	4382      	bics	r2, r0
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a62:	e7fb      	b.n	8000a5c <RCC_AHBPeriphResetCmd+0xc>
 8000a64:	40021000 	.word	0x40021000

08000a68 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000a6a:	68da      	ldr	r2, [r3, #12]
  if (NewState != DISABLE)
 8000a6c:	2900      	cmp	r1, #0
 8000a6e:	d002      	beq.n	8000a76 <RCC_APB2PeriphResetCmd+0xe>
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000a70:	4310      	orrs	r0, r2
 8000a72:	60d8      	str	r0, [r3, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000a74:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000a76:	4382      	bics	r2, r0
 8000a78:	60da      	str	r2, [r3, #12]
}
 8000a7a:	e7fb      	b.n	8000a74 <RCC_APB2PeriphResetCmd+0xc>
 8000a7c:	40021000 	.word	0x40021000

08000a80 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000a82:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 8000a84:	2900      	cmp	r1, #0
 8000a86:	d002      	beq.n	8000a8e <RCC_APB1PeriphResetCmd+0xe>
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000a88:	4310      	orrs	r0, r2
 8000a8a:	6118      	str	r0, [r3, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000a8c:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000a8e:	4382      	bics	r2, r0
 8000a90:	611a      	str	r2, [r3, #16]
}
 8000a92:	e7fb      	b.n	8000a8c <RCC_APB1PeriphResetCmd+0xc>
 8000a94:	40021000 	.word	0x40021000

08000a98 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <RCC_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000a9a:	781a      	ldrb	r2, [r3, #0]
  if (NewState != DISABLE)
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	d002      	beq.n	8000aa6 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000aa0:	4310      	orrs	r0, r2
 8000aa2:	7018      	strb	r0, [r3, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 8000aa4:	4770      	bx	lr
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 8000aa6:	4382      	bics	r2, r0
 8000aa8:	701a      	strb	r2, [r3, #0]
}
 8000aaa:	e7fb      	b.n	8000aa4 <RCC_ITConfig+0xc>
 8000aac:	40021009 	.word	0x40021009

08000ab0 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000ab0:	0942      	lsrs	r2, r0, #5
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <RCC_GetFlagStatus+0x28>)

  if (tmp == 0)               /* The flag to check is in CR register */
 8000ab4:	d106      	bne.n	8000ac4 <RCC_GetFlagStatus+0x14>
  {
    statusreg = RCC->CR;
 8000ab6:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->CR2;
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000ab8:	221f      	movs	r2, #31
 8000aba:	4010      	ands	r0, r2

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000abc:	40c3      	lsrs	r3, r0
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000abe:	2001      	movs	r0, #1
 8000ac0:	4018      	ands	r0, r3
}
 8000ac2:	4770      	bx	lr
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000ac4:	2a01      	cmp	r2, #1
 8000ac6:	d101      	bne.n	8000acc <RCC_GetFlagStatus+0x1c>
    statusreg = RCC->BDCR;
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	e7f5      	b.n	8000ab8 <RCC_GetFlagStatus+0x8>
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8000acc:	2a02      	cmp	r2, #2
 8000ace:	d101      	bne.n	8000ad4 <RCC_GetFlagStatus+0x24>
    statusreg = RCC->CSR;
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	e7f1      	b.n	8000ab8 <RCC_GetFlagStatus+0x8>
    statusreg = RCC->CR2;
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	e7ef      	b.n	8000ab8 <RCC_GetFlagStatus+0x8>
 8000ad8:	40021000 	.word	0x40021000

08000adc <RCC_WaitForHSEStartUp>:
{
 8000adc:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t StartUpCounter = 0;
 8000ade:	2300      	movs	r3, #0
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000ae0:	24a0      	movs	r4, #160	; 0xa0
  __IO uint32_t StartUpCounter = 0;
 8000ae2:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000ae4:	01e4      	lsls	r4, r4, #7
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000ae6:	2011      	movs	r0, #17
 8000ae8:	f7ff ffe2 	bl	8000ab0 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8000aec:	9b01      	ldr	r3, [sp, #4]
 8000aee:	3301      	adds	r3, #1
 8000af0:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000af2:	9b01      	ldr	r3, [sp, #4]
 8000af4:	42a3      	cmp	r3, r4
 8000af6:	d001      	beq.n	8000afc <RCC_WaitForHSEStartUp+0x20>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d0f4      	beq.n	8000ae6 <RCC_WaitForHSEStartUp+0xa>
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000afc:	2011      	movs	r0, #17
 8000afe:	f7ff ffd7 	bl	8000ab0 <RCC_GetFlagStatus>
 8000b02:	1e43      	subs	r3, r0, #1
 8000b04:	4198      	sbcs	r0, r3
  return (status);
 8000b06:	b2c0      	uxtb	r0, r0
}
 8000b08:	bd16      	pop	{r1, r2, r4, pc}

08000b0a <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	4a02      	ldr	r2, [pc, #8]	; (8000b18 <RCC_ClearFlag+0xe>)
 8000b0e:	045b      	lsls	r3, r3, #17
 8000b10:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000b12:	430b      	orrs	r3, r1
 8000b14:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000

08000b1c <RCC_GetITStatus>:
  *             @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for STM32F072 devices    
  *             @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8000b1c:	0003      	movs	r3, r0
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000b1e:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <RCC_GetITStatus+0x10>)
 8000b20:	6890      	ldr	r0, [r2, #8]
 8000b22:	4018      	ands	r0, r3
 8000b24:	1e43      	subs	r3, r0, #1
 8000b26:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000b28:	b2c0      	uxtb	r0, r0
}
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000

08000b30 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 8000b30:	4b01      	ldr	r3, [pc, #4]	; (8000b38 <RCC_ClearITPendingBit+0x8>)
 8000b32:	7018      	strb	r0, [r3, #0]
}
 8000b34:	4770      	bx	lr
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	4002100a 	.word	0x4002100a

08000b3c <USART_DeInit>:
void USART_DeInit(USART_TypeDef* USARTx)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <USART_DeInit+0xc0>)
{
 8000b3e:	b510      	push	{r4, lr}
  if (USARTx == USART1)
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d10a      	bne.n	8000b5a <USART_DeInit+0x1e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000b44:	2080      	movs	r0, #128	; 0x80
 8000b46:	2101      	movs	r1, #1
 8000b48:	01c0      	lsls	r0, r0, #7
 8000b4a:	f7ff ff8d 	bl	8000a68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000b4e:	2080      	movs	r0, #128	; 0x80
 8000b50:	2100      	movs	r1, #0
 8000b52:	01c0      	lsls	r0, r0, #7
  else 
  {
    if  (USARTx == USART8)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, DISABLE);
 8000b54:	f7ff ff88 	bl	8000a68 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8000b58:	e00c      	b.n	8000b74 <USART_DeInit+0x38>
  else if (USARTx == USART2)
 8000b5a:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <USART_DeInit+0xc4>)
 8000b5c:	4298      	cmp	r0, r3
 8000b5e:	d10a      	bne.n	8000b76 <USART_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000b60:	2080      	movs	r0, #128	; 0x80
 8000b62:	2101      	movs	r1, #1
 8000b64:	0280      	lsls	r0, r0, #10
 8000b66:	f7ff ff8b 	bl	8000a80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000b6a:	2080      	movs	r0, #128	; 0x80
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	0280      	lsls	r0, r0, #10
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, DISABLE);
 8000b70:	f7ff ff86 	bl	8000a80 <RCC_APB1PeriphResetCmd>
}
 8000b74:	bd10      	pop	{r4, pc}
  else if (USARTx == USART3)
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <USART_DeInit+0xc8>)
 8000b78:	4298      	cmp	r0, r3
 8000b7a:	d108      	bne.n	8000b8e <USART_DeInit+0x52>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000b7c:	2080      	movs	r0, #128	; 0x80
 8000b7e:	2101      	movs	r1, #1
 8000b80:	02c0      	lsls	r0, r0, #11
 8000b82:	f7ff ff7d 	bl	8000a80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000b86:	2080      	movs	r0, #128	; 0x80
 8000b88:	2100      	movs	r1, #0
 8000b8a:	02c0      	lsls	r0, r0, #11
 8000b8c:	e7f0      	b.n	8000b70 <USART_DeInit+0x34>
    else if (USARTx == USART4)
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <USART_DeInit+0xcc>)
 8000b90:	4298      	cmp	r0, r3
 8000b92:	d108      	bne.n	8000ba6 <USART_DeInit+0x6a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, ENABLE);
 8000b94:	2080      	movs	r0, #128	; 0x80
 8000b96:	2101      	movs	r1, #1
 8000b98:	0300      	lsls	r0, r0, #12
 8000b9a:	f7ff ff71 	bl	8000a80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, DISABLE);
 8000b9e:	2080      	movs	r0, #128	; 0x80
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	0300      	lsls	r0, r0, #12
 8000ba4:	e7e4      	b.n	8000b70 <USART_DeInit+0x34>
  else if (USARTx == USART5)
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <USART_DeInit+0xd0>)
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	d108      	bne.n	8000bbe <USART_DeInit+0x82>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, ENABLE);
 8000bac:	2080      	movs	r0, #128	; 0x80
 8000bae:	2101      	movs	r1, #1
 8000bb0:	0340      	lsls	r0, r0, #13
 8000bb2:	f7ff ff65 	bl	8000a80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, DISABLE);
 8000bb6:	2080      	movs	r0, #128	; 0x80
 8000bb8:	2100      	movs	r1, #0
 8000bba:	0340      	lsls	r0, r0, #13
 8000bbc:	e7d8      	b.n	8000b70 <USART_DeInit+0x34>
    else if (USARTx == USART6)
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <USART_DeInit+0xd4>)
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	d106      	bne.n	8000bd2 <USART_DeInit+0x96>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	2020      	movs	r0, #32
 8000bc8:	f7ff ff4e 	bl	8000a68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2020      	movs	r0, #32
 8000bd0:	e7c0      	b.n	8000b54 <USART_DeInit+0x18>
  else if (USARTx == USART7)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <USART_DeInit+0xd8>)
 8000bd4:	4298      	cmp	r0, r3
 8000bd6:	d106      	bne.n	8000be6 <USART_DeInit+0xaa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART7, ENABLE);
 8000bd8:	2101      	movs	r1, #1
 8000bda:	2040      	movs	r0, #64	; 0x40
 8000bdc:	f7ff ff44 	bl	8000a68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART7, DISABLE);
 8000be0:	2100      	movs	r1, #0
 8000be2:	2040      	movs	r0, #64	; 0x40
 8000be4:	e7b6      	b.n	8000b54 <USART_DeInit+0x18>
    if  (USARTx == USART8)
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <USART_DeInit+0xdc>)
 8000be8:	4298      	cmp	r0, r3
 8000bea:	d1c3      	bne.n	8000b74 <USART_DeInit+0x38>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, ENABLE);
 8000bec:	2101      	movs	r1, #1
 8000bee:	2080      	movs	r0, #128	; 0x80
 8000bf0:	f7ff ff3a 	bl	8000a68 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, DISABLE);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2080      	movs	r0, #128	; 0x80
 8000bf8:	e7ac      	b.n	8000b54 <USART_DeInit+0x18>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	40013800 	.word	0x40013800
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40004800 	.word	0x40004800
 8000c08:	40004c00 	.word	0x40004c00
 8000c0c:	40005000 	.word	0x40005000
 8000c10:	40011400 	.word	0x40011400
 8000c14:	40011800 	.word	0x40011800
 8000c18:	40011c00 	.word	0x40011c00

08000c1c <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000c1c:	2201      	movs	r2, #1
{
 8000c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c20:	000d      	movs	r5, r1
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000c22:	6803      	ldr	r3, [r0, #0]
{
 8000c24:	b08b      	sub	sp, #44	; 0x2c
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000c26:	4393      	bics	r3, r2
 8000c28:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c2a:	6843      	ldr	r3, [r0, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000c2c:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <USART_Init+0x9c>)
{
 8000c2e:	0004      	movs	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000c30:	4013      	ands	r3, r2
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000c32:	688a      	ldr	r2, [r1, #8]
 8000c34:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8000c36:	6043      	str	r3, [r0, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000c38:	6803      	ldr	r3, [r0, #0]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000c3a:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <USART_Init+0xa0>)
 8000c3c:	401a      	ands	r2, r3
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c3e:	684b      	ldr	r3, [r1, #4]
 8000c40:	68c9      	ldr	r1, [r1, #12]
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6929      	ldr	r1, [r5, #16]
 8000c46:	430b      	orrs	r3, r1
 8000c48:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8000c4a:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000c4c:	6883      	ldr	r3, [r0, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <USART_Init+0xa4>)
 8000c50:	4013      	ands	r3, r2
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000c52:	696a      	ldr	r2, [r5, #20]
 8000c54:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8000c56:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000c58:	4668      	mov	r0, sp
 8000c5a:	f7ff fde7 	bl	800082c <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <USART_Init+0xa8>)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8000c60:	9e06      	ldr	r6, [sp, #24]
  if (USARTx == USART1)
 8000c62:	429c      	cmp	r4, r3
 8000c64:	d008      	beq.n	8000c78 <USART_Init+0x5c>
  }
  else if (USARTx == USART2)
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <USART_Init+0xac>)
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000c68:	9e07      	ldr	r6, [sp, #28]
  else if (USARTx == USART2)
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	d004      	beq.n	8000c78 <USART_Init+0x5c>
  }
   else if (USARTx == USART3)
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <USART_Init+0xb0>)
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8000c70:	9e08      	ldr	r6, [sp, #32]
   else if (USARTx == USART3)
 8000c72:	429c      	cmp	r4, r3
 8000c74:	d000      	beq.n	8000c78 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8000c76:	9e02      	ldr	r6, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	682f      	ldr	r7, [r5, #0]
 8000c7c:	041b      	lsls	r3, r3, #16
 8000c7e:	d500      	bpl.n	8000c82 <USART_Init+0x66>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8000c80:	0076      	lsls	r6, r6, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8000c82:	0039      	movs	r1, r7
 8000c84:	0030      	movs	r0, r6
 8000c86:	f000 fcd1 	bl	800162c <__udivsi3>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000c8a:	0039      	movs	r1, r7
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8000c8c:	0005      	movs	r5, r0
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000c8e:	0030      	movs	r0, r6
 8000c90:	f000 fd52 	bl	8001738 <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 8000c94:	2300      	movs	r3, #0
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8000c96:	087f      	lsrs	r7, r7, #1
    divider++;
 8000c98:	42b9      	cmp	r1, r7
 8000c9a:	415b      	adcs	r3, r3
 8000c9c:	18ed      	adds	r5, r5, r3
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	041b      	lsls	r3, r3, #16
 8000ca2:	d504      	bpl.n	8000cae <USART_Init+0x92>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <USART_Init+0xb4>)
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000ca6:	072a      	lsls	r2, r5, #28
 8000ca8:	0f52      	lsrs	r2, r2, #29
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000caa:	401d      	ands	r5, r3
 8000cac:	4315      	orrs	r5, r2
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8000cae:	b2ad      	uxth	r5, r5
 8000cb0:	81a5      	strh	r5, [r4, #12]
}
 8000cb2:	b00b      	add	sp, #44	; 0x2c
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	ffffcfff 	.word	0xffffcfff
 8000cbc:	ffffe9f3 	.word	0xffffe9f3
 8000cc0:	fffffcff 	.word	0xfffffcff
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40004800 	.word	0x40004800
 8000cd0:	0000fff0 	.word	0x0000fff0

08000cd4 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000cd4:	2396      	movs	r3, #150	; 0x96
 8000cd6:	019b      	lsls	r3, r3, #6
 8000cd8:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000cda:	220c      	movs	r2, #12
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000cdc:	2300      	movs	r3, #0
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000cde:	6102      	str	r2, [r0, #16]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000ce0:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000ce2:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000ce4:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000ce6:	6143      	str	r3, [r0, #20]
}
 8000ce8:	4770      	bx	lr

08000cea <USART_ClockInit>:
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000cea:	6843      	ldr	r3, [r0, #4]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000cec:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <USART_ClockInit+0x1e>)
{
 8000cee:	b510      	push	{r4, lr}
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000cf0:	401a      	ands	r2, r3
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8000cf2:	684c      	ldr	r4, [r1, #4]
 8000cf4:	680b      	ldr	r3, [r1, #0]
 8000cf6:	4323      	orrs	r3, r4
 8000cf8:	688c      	ldr	r4, [r1, #8]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8000cfa:	68c9      	ldr	r1, [r1, #12]
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8000cfc:	4323      	orrs	r3, r4
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 8000cfe:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8000d00:	4313      	orrs	r3, r2
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8000d02:	6043      	str	r3, [r0, #4]
}
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	fffff0ff 	.word	0xfffff0ff

08000d0c <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000d10:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000d12:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000d14:	60c3      	str	r3, [r0, #12]
}
 8000d16:	4770      	bx	lr

08000d18 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000d18:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d1a:	6802      	ldr	r2, [r0, #0]
  if (NewState != DISABLE)
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	d002      	beq.n	8000d26 <USART_Cmd+0xe>
    USARTx->CR1 |= USART_CR1_UE;
 8000d20:	4313      	orrs	r3, r2
 8000d22:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 8000d24:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000d26:	439a      	bics	r2, r3
 8000d28:	6002      	str	r2, [r0, #0]
}
 8000d2a:	e7fb      	b.n	8000d24 <USART_Cmd+0xc>

08000d2c <USART_DirectionModeCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8000d2c:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d002      	beq.n	8000d38 <USART_DirectionModeCmd+0xc>
    USARTx->CR1 |= USART_DirectionMode;
 8000d32:	4319      	orrs	r1, r3
 8000d34:	6001      	str	r1, [r0, #0]
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
  }
}
 8000d36:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8000d38:	438b      	bics	r3, r1
 8000d3a:	6003      	str	r3, [r0, #0]
}
 8000d3c:	e7fb      	b.n	8000d36 <USART_DirectionModeCmd+0xa>

08000d3e <USART_OverSampling8Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d3e:	2900      	cmp	r1, #0
 8000d40:	d005      	beq.n	8000d4e <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	6802      	ldr	r2, [r0, #0]
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8000d4a:	6003      	str	r3, [r0, #0]
  }
}  
 8000d4c:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8000d4e:	6803      	ldr	r3, [r0, #0]
 8000d50:	4a01      	ldr	r2, [pc, #4]	; (8000d58 <USART_OverSampling8Cmd+0x1a>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	e7f9      	b.n	8000d4a <USART_OverSampling8Cmd+0xc>
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	ffff7fff 	.word	0xffff7fff

08000d5c <USART_OneBitMethodCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	d005      	beq.n	8000d6c <USART_OneBitMethodCmd+0x10>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	6882      	ldr	r2, [r0, #8]
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8000d68:	6083      	str	r3, [r0, #8]
  }
}
 8000d6a:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8000d6c:	6883      	ldr	r3, [r0, #8]
 8000d6e:	4a01      	ldr	r2, [pc, #4]	; (8000d74 <USART_OneBitMethodCmd+0x18>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	e7f9      	b.n	8000d68 <USART_OneBitMethodCmd+0xc>
 8000d74:	fffff7ff 	.word	0xfffff7ff

08000d78 <USART_MSBFirstCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d005      	beq.n	8000d88 <USART_MSBFirstCmd+0x10>
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	6842      	ldr	r2, [r0, #4]
 8000d80:	031b      	lsls	r3, r3, #12
 8000d82:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the 
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8000d84:	6043      	str	r3, [r0, #4]
  }
}
 8000d86:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8000d88:	6843      	ldr	r3, [r0, #4]
 8000d8a:	4a01      	ldr	r2, [pc, #4]	; (8000d90 <USART_MSBFirstCmd+0x18>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	e7f9      	b.n	8000d84 <USART_MSBFirstCmd+0xc>
 8000d90:	fff7ffff 	.word	0xfff7ffff

08000d94 <USART_DataInvCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d005      	beq.n	8000da4 <USART_DataInvCmd+0x10>
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	6842      	ldr	r2, [r0, #4]
 8000d9c:	02db      	lsls	r3, r3, #11
 8000d9e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8000da0:	6043      	str	r3, [r0, #4]
  }
}
 8000da2:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8000da4:	6843      	ldr	r3, [r0, #4]
 8000da6:	4a01      	ldr	r2, [pc, #4]	; (8000dac <USART_DataInvCmd+0x18>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	e7f9      	b.n	8000da0 <USART_DataInvCmd+0xc>
 8000dac:	fffbffff 	.word	0xfffbffff

08000db0 <USART_InvPinCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000db0:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d002      	beq.n	8000dbc <USART_InvPinCmd+0xc>
    USARTx->CR2 |= USART_InvPin;
 8000db6:	4319      	orrs	r1, r3
 8000db8:	6041      	str	r1, [r0, #4]
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
  }
}
 8000dba:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 8000dbc:	438b      	bics	r3, r1
 8000dbe:	6043      	str	r3, [r0, #4]
}
 8000dc0:	e7fb      	b.n	8000dba <USART_InvPinCmd+0xa>

08000dc2 <USART_SWAPPinCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d005      	beq.n	8000dd2 <USART_SWAPPinCmd+0x10>
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	6842      	ldr	r2, [r0, #4]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 8000dce:	6043      	str	r3, [r0, #4]
  }
}
 8000dd0:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 8000dd2:	6843      	ldr	r3, [r0, #4]
 8000dd4:	4a01      	ldr	r2, [pc, #4]	; (8000ddc <USART_SWAPPinCmd+0x1a>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	e7f9      	b.n	8000dce <USART_SWAPPinCmd+0xc>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	ffff7fff 	.word	0xffff7fff

08000de0 <USART_ReceiverTimeOutCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000de0:	2900      	cmp	r1, #0
 8000de2:	d005      	beq.n	8000df0 <USART_ReceiverTimeOutCmd+0x10>
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	6842      	ldr	r2, [r0, #4]
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8000dec:	6043      	str	r3, [r0, #4]
  }
}
 8000dee:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8000df0:	6843      	ldr	r3, [r0, #4]
 8000df2:	4a01      	ldr	r2, [pc, #4]	; (8000df8 <USART_ReceiverTimeOutCmd+0x18>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	e7f9      	b.n	8000dec <USART_ReceiverTimeOutCmd+0xc>
 8000df8:	ff7fffff 	.word	0xff7fffff

08000dfc <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 8000dfc:	6943      	ldr	r3, [r0, #20]
 8000dfe:	0e1b      	lsrs	r3, r3, #24
 8000e00:	061b      	lsls	r3, r3, #24
 8000e02:	6143      	str	r3, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8000e04:	6943      	ldr	r3, [r0, #20]
 8000e06:	4319      	orrs	r1, r3
 8000e08:	6141      	str	r1, [r0, #20]
}
 8000e0a:	4770      	bx	lr

08000e0c <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	8a03      	ldrh	r3, [r0, #16]
 8000e10:	4393      	bics	r3, r2
 8000e12:	8203      	strh	r3, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000e14:	8a03      	ldrh	r3, [r0, #16]
 8000e16:	4319      	orrs	r1, r3
 8000e18:	8201      	strh	r1, [r0, #16]
}
 8000e1a:	4770      	bx	lr

08000e1c <USART_STOPModeCmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called when USART clock is set to HSI or LSE. 
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000e1c:	2302      	movs	r3, #2
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8000e1e:	6802      	ldr	r2, [r0, #0]
  if (NewState != DISABLE)
 8000e20:	2900      	cmp	r1, #0
 8000e22:	d002      	beq.n	8000e2a <USART_STOPModeCmd+0xe>
    USARTx->CR1 |= USART_CR1_UESM;
 8000e24:	4313      	orrs	r3, r2
 8000e26:	6003      	str	r3, [r0, #0]
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
  }
}
 8000e28:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8000e2a:	439a      	bics	r2, r3
 8000e2c:	6002      	str	r2, [r0, #0]
}
 8000e2e:	e7fb      	b.n	8000e28 <USART_STOPModeCmd+0xc>

08000e30 <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8000e30:	6883      	ldr	r3, [r0, #8]
 8000e32:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <USART_StopModeWakeUpSourceConfig+0x10>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 8000e38:	6883      	ldr	r3, [r0, #8]
 8000e3a:	4319      	orrs	r1, r3
 8000e3c:	6081      	str	r1, [r0, #8]
}
 8000e3e:	4770      	bx	lr
 8000e40:	ffcfffff 	.word	0xffcfffff

08000e44 <USART_AutoBaudRateCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d005      	beq.n	8000e54 <USART_AutoBaudRateCmd+0x10>
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	6842      	ldr	r2, [r0, #4]
 8000e4c:	035b      	lsls	r3, r3, #13
 8000e4e:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8000e50:	6043      	str	r3, [r0, #4]
  }
}
 8000e52:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8000e54:	6843      	ldr	r3, [r0, #4]
 8000e56:	4a01      	ldr	r2, [pc, #4]	; (8000e5c <USART_AutoBaudRateCmd+0x18>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	e7f9      	b.n	8000e50 <USART_AutoBaudRateCmd+0xc>
 8000e5c:	ffefffff 	.word	0xffefffff

08000e60 <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8000e60:	6843      	ldr	r3, [r0, #4]
 8000e62:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <USART_AutoBaudRateConfig+0x10>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8000e68:	6843      	ldr	r3, [r0, #4]
 8000e6a:	4319      	orrs	r1, r3
 8000e6c:	6041      	str	r1, [r0, #4]
}
 8000e6e:	4770      	bx	lr
 8000e70:	ff9fffff 	.word	0xff9fffff

08000e74 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000e74:	05c9      	lsls	r1, r1, #23
 8000e76:	0dc9      	lsrs	r1, r1, #23
 8000e78:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000e7a:	4770      	bx	lr

08000e7c <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8000e7c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8000e7e:	05c0      	lsls	r0, r0, #23
 8000e80:	0dc0      	lsrs	r0, r0, #23
}
 8000e82:	4770      	bx	lr

08000e84 <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8000e84:	6843      	ldr	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8000e86:	0609      	lsls	r1, r1, #24
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8000e8e:	6843      	ldr	r3, [r0, #4]
 8000e90:	4319      	orrs	r1, r3
 8000e92:	6041      	str	r1, [r0, #4]
}
 8000e94:	4770      	bx	lr

08000e96 <USART_MuteModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8000e96:	2900      	cmp	r1, #0
 8000e98:	d005      	beq.n	8000ea6 <USART_MuteModeCmd+0x10>
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	6802      	ldr	r2, [r0, #0]
 8000e9e:	019b      	lsls	r3, r3, #6
 8000ea0:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8000ea2:	6003      	str	r3, [r0, #0]
  }
}
 8000ea4:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8000ea6:	6803      	ldr	r3, [r0, #0]
 8000ea8:	4a01      	ldr	r2, [pc, #4]	; (8000eb0 <USART_MuteModeCmd+0x1a>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	e7f9      	b.n	8000ea2 <USART_MuteModeCmd+0xc>
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	ffffdfff 	.word	0xffffdfff

08000eb4 <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8000eb4:	6803      	ldr	r3, [r0, #0]
 8000eb6:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <USART_MuteModeWakeUpConfig+0x10>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 8000ebc:	6803      	ldr	r3, [r0, #0]
 8000ebe:	4319      	orrs	r1, r3
 8000ec0:	6001      	str	r1, [r0, #0]
}
 8000ec2:	4770      	bx	lr
 8000ec4:	fffff7ff 	.word	0xfffff7ff

08000ec8 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8000ec8:	2210      	movs	r2, #16
 8000eca:	6843      	ldr	r3, [r0, #4]
 8000ecc:	4393      	bics	r3, r2
 8000ece:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 8000ed0:	6843      	ldr	r3, [r0, #4]
 8000ed2:	4319      	orrs	r1, r3
 8000ed4:	6041      	str	r1, [r0, #4]
}
 8000ed6:	4770      	bx	lr

08000ed8 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 8000ed8:	2220      	movs	r2, #32
 8000eda:	6843      	ldr	r3, [r0, #4]
 8000edc:	4393      	bics	r3, r2
 8000ede:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8000ee0:	6843      	ldr	r3, [r0, #4]
 8000ee2:	4319      	orrs	r1, r3
 8000ee4:	6041      	str	r1, [r0, #4]
}
 8000ee6:	4770      	bx	lr

08000ee8 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d005      	beq.n	8000ef8 <USART_LINCmd+0x10>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	6842      	ldr	r2, [r0, #4]
 8000ef0:	01db      	lsls	r3, r3, #7
 8000ef2:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 8000ef4:	6043      	str	r3, [r0, #4]
  }
}
 8000ef6:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 8000ef8:	6843      	ldr	r3, [r0, #4]
 8000efa:	4a01      	ldr	r2, [pc, #4]	; (8000f00 <USART_LINCmd+0x18>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	e7f9      	b.n	8000ef4 <USART_LINCmd+0xc>
 8000f00:	ffffbfff 	.word	0xffffbfff

08000f04 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000f04:	2308      	movs	r3, #8
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000f06:	6882      	ldr	r2, [r0, #8]
  if (NewState != DISABLE)
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	d002      	beq.n	8000f12 <USART_HalfDuplexCmd+0xe>
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
  }
}
 8000f10:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 8000f12:	439a      	bics	r2, r3
 8000f14:	6082      	str	r2, [r0, #8]
}
 8000f16:	e7fb      	b.n	8000f10 <USART_HalfDuplexCmd+0xc>

08000f18 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8000f18:	8a03      	ldrh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000f1a:	0209      	lsls	r1, r1, #8
  USARTx->GTPR &= USART_GTPR_PSC;
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	8203      	strh	r3, [r0, #16]
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000f20:	8a03      	ldrh	r3, [r0, #16]
 8000f22:	4319      	orrs	r1, r3
 8000f24:	8201      	strh	r1, [r0, #16]
}
 8000f26:	4770      	bx	lr

08000f28 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000f28:	2320      	movs	r3, #32
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000f2a:	6882      	ldr	r2, [r0, #8]
  if (NewState != DISABLE)
 8000f2c:	2900      	cmp	r1, #0
 8000f2e:	d002      	beq.n	8000f36 <USART_SmartCardCmd+0xe>
    USARTx->CR3 |= USART_CR3_SCEN;
 8000f30:	4313      	orrs	r3, r2
 8000f32:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
  }
}
 8000f34:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8000f36:	439a      	bics	r2, r3
 8000f38:	6082      	str	r2, [r0, #8]
}
 8000f3a:	e7fb      	b.n	8000f34 <USART_SmartCardCmd+0xc>

08000f3c <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000f3c:	2310      	movs	r3, #16
  assert_param(IS_USART_123_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000f3e:	6882      	ldr	r2, [r0, #8]
  if (NewState != DISABLE)
 8000f40:	2900      	cmp	r1, #0
 8000f42:	d002      	beq.n	8000f4a <USART_SmartCardNACKCmd+0xe>
    USARTx->CR3 |= USART_CR3_NACK;
 8000f44:	4313      	orrs	r3, r2
 8000f46:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
  }
}
 8000f48:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8000f4a:	439a      	bics	r2, r3
 8000f4c:	6082      	str	r2, [r0, #8]
}
 8000f4e:	e7fb      	b.n	8000f48 <USART_SmartCardNACKCmd+0xc>

08000f50 <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8000f50:	6883      	ldr	r3, [r0, #8]
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <USART_SetAutoRetryCount+0x14>)
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8000f54:	0449      	lsls	r1, r1, #17
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8000f56:	4013      	ands	r3, r2
 8000f58:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8000f5a:	6883      	ldr	r3, [r0, #8]
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	6081      	str	r1, [r0, #8]
}
 8000f60:	4770      	bx	lr
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	fff1ffff 	.word	0xfff1ffff

08000f68 <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8000f68:	6943      	ldr	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8000f6a:	0609      	lsls	r1, r1, #24
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	6143      	str	r3, [r0, #20]
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8000f72:	6943      	ldr	r3, [r0, #20]
 8000f74:	4319      	orrs	r1, r3
 8000f76:	6141      	str	r1, [r0, #20]
}
 8000f78:	4770      	bx	lr

08000f7a <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	6883      	ldr	r3, [r0, #8]
 8000f7e:	4393      	bics	r3, r2
 8000f80:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8000f82:	6883      	ldr	r3, [r0, #8]
 8000f84:	4319      	orrs	r1, r3
 8000f86:	6081      	str	r1, [r0, #8]
}
 8000f88:	4770      	bx	lr

08000f8a <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000f8a:	2302      	movs	r3, #2
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000f8c:	6882      	ldr	r2, [r0, #8]
  if (NewState != DISABLE)
 8000f8e:	2900      	cmp	r1, #0
 8000f90:	d002      	beq.n	8000f98 <USART_IrDACmd+0xe>
    USARTx->CR3 |= USART_CR3_IREN;
 8000f92:	4313      	orrs	r3, r2
 8000f94:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
  }
}
 8000f96:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8000f98:	439a      	bics	r2, r3
 8000f9a:	6082      	str	r2, [r0, #8]
}
 8000f9c:	e7fb      	b.n	8000f96 <USART_IrDACmd+0xc>

08000f9e <USART_DECmd>:
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f9e:	2900      	cmp	r1, #0
 8000fa0:	d005      	beq.n	8000fae <USART_DECmd+0x10>
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	6882      	ldr	r2, [r0, #8]
 8000fa6:	01db      	lsls	r3, r3, #7
 8000fa8:	4313      	orrs	r3, r2
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8000faa:	6083      	str	r3, [r0, #8]
  }
}
 8000fac:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8000fae:	6883      	ldr	r3, [r0, #8]
 8000fb0:	4a01      	ldr	r2, [pc, #4]	; (8000fb8 <USART_DECmd+0x1a>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	e7f9      	b.n	8000faa <USART_DECmd+0xc>
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	ffffbfff 	.word	0xffffbfff

08000fbc <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 8000fbc:	6883      	ldr	r3, [r0, #8]
 8000fbe:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <USART_DEPolarityConfig+0x10>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 8000fc4:	6883      	ldr	r3, [r0, #8]
 8000fc6:	4319      	orrs	r1, r3
 8000fc8:	6081      	str	r1, [r0, #8]
}
 8000fca:	4770      	bx	lr
 8000fcc:	ffff7fff 	.word	0xffff7fff

08000fd0 <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8000fd0:	6803      	ldr	r3, [r0, #0]
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <USART_SetDEAssertionTime+0x14>)
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8000fd4:	0549      	lsls	r1, r1, #21
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8000fda:	6803      	ldr	r3, [r0, #0]
 8000fdc:	4319      	orrs	r1, r3
 8000fde:	6001      	str	r1, [r0, #0]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	fc1fffff 	.word	0xfc1fffff

08000fe8 <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8000fe8:	6803      	ldr	r3, [r0, #0]
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <USART_SetDEDeassertionTime+0x14>)
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8000fec:	0409      	lsls	r1, r1, #16
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8000fee:	4013      	ands	r3, r2
 8000ff0:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8000ff2:	6803      	ldr	r3, [r0, #0]
 8000ff4:	4319      	orrs	r1, r3
 8000ff6:	6001      	str	r1, [r0, #0]
}
 8000ff8:	4770      	bx	lr
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	ffe0ffff 	.word	0xffe0ffff

08001000 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001000:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8001002:	2a00      	cmp	r2, #0
 8001004:	d002      	beq.n	800100c <USART_DMACmd+0xc>
    USARTx->CR3 |= USART_DMAReq;
 8001006:	4319      	orrs	r1, r3
 8001008:	6081      	str	r1, [r0, #8]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
  }
}
 800100a:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 800100c:	438b      	bics	r3, r1
 800100e:	6083      	str	r3, [r0, #8]
}
 8001010:	e7fb      	b.n	800100a <USART_DMACmd+0xa>

08001012 <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8001012:	6883      	ldr	r3, [r0, #8]
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <USART_DMAReceptionErrorConfig+0x12>)
 8001016:	4013      	ands	r3, r2
 8001018:	6083      	str	r3, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 800101a:	6883      	ldr	r3, [r0, #8]
 800101c:	4319      	orrs	r1, r3
 800101e:	6081      	str	r1, [r0, #8]
}
 8001020:	4770      	bx	lr
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	ffffdfff 	.word	0xffffdfff

08001028 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001028:	2301      	movs	r3, #1
{
 800102a:	b510      	push	{r4, lr}
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800102c:	b28c      	uxth	r4, r1
  itpos = USART_IT & IT_MASK;
 800102e:	b2c9      	uxtb	r1, r1
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001030:	0a24      	lsrs	r4, r4, #8
  itmask = (((uint32_t)0x01) << itpos);
 8001032:	408b      	lsls	r3, r1
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001034:	2c02      	cmp	r4, #2
 8001036:	d106      	bne.n	8001046 <USART_ITConfig+0x1e>
  {
    usartxbase += 0x04;
 8001038:	3004      	adds	r0, #4
    usartxbase += 0x08;
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800103a:	2a00      	cmp	r2, #0
 800103c:	d007      	beq.n	800104e <USART_ITConfig+0x26>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800103e:	6802      	ldr	r2, [r0, #0]
 8001040:	4313      	orrs	r3, r2
 8001042:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001044:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001046:	2c03      	cmp	r4, #3
 8001048:	d1f7      	bne.n	800103a <USART_ITConfig+0x12>
    usartxbase += 0x08;
 800104a:	3008      	adds	r0, #8
 800104c:	e7f5      	b.n	800103a <USART_ITConfig+0x12>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800104e:	6802      	ldr	r2, [r0, #0]
 8001050:	439a      	bics	r2, r3
 8001052:	6002      	str	r2, [r0, #0]
}
 8001054:	e7f6      	b.n	8001044 <USART_ITConfig+0x1c>

08001056 <USART_RequestCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 8001056:	8b03      	ldrh	r3, [r0, #24]
  if (NewState != DISABLE)
 8001058:	2a00      	cmp	r2, #0
 800105a:	d003      	beq.n	8001064 <USART_RequestCmd+0xe>
      USARTx->RQR |= USART_Request;
 800105c:	4319      	orrs	r1, r3
 800105e:	b289      	uxth	r1, r1
 8001060:	8301      	strh	r1, [r0, #24]
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
  }
}
 8001062:	4770      	bx	lr
    USARTx->RQR &= (uint32_t)~USART_Request;
 8001064:	438b      	bics	r3, r1
 8001066:	8303      	strh	r3, [r0, #24]
}
 8001068:	e7fb      	b.n	8001062 <USART_RequestCmd+0xc>

0800106a <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 800106a:	6883      	ldr	r3, [r0, #8]
 800106c:	4a03      	ldr	r2, [pc, #12]	; (800107c <USART_OverrunDetectionConfig+0x12>)
 800106e:	4013      	ands	r3, r2
 8001070:	6083      	str	r3, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8001072:	6883      	ldr	r3, [r0, #8]
 8001074:	4319      	orrs	r1, r3
 8001076:	6081      	str	r1, [r0, #8]
}
 8001078:	4770      	bx	lr
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	ffffefff 	.word	0xffffefff

08001080 <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001080:	69c0      	ldr	r0, [r0, #28]
 8001082:	4008      	ands	r0, r1
 8001084:	1e41      	subs	r1, r0, #1
 8001086:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001088:	b2c0      	uxtb	r0, r0
}
 800108a:	4770      	bx	lr

0800108c <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 800108c:	6201      	str	r1, [r0, #32]
}
 800108e:	4770      	bx	lr

08001090 <USART_GetITStatus>:
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001090:	2301      	movs	r3, #1
{
 8001092:	b510      	push	{r4, lr}
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001094:	b28a      	uxth	r2, r1
  itmask = USART_IT & IT_MASK;
 8001096:	b2cc      	uxtb	r4, r1
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001098:	0a12      	lsrs	r2, r2, #8
  itmask = (uint32_t)0x01 << itmask;
 800109a:	40a3      	lsls	r3, r4
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800109c:	2a01      	cmp	r2, #1
 800109e:	d10d      	bne.n	80010bc <USART_GetITStatus+0x2c>
  {
    itmask &= USARTx->CR1;
 80010a0:	6802      	ldr	r2, [r0, #0]
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80010a2:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
 80010a4:	69c2      	ldr	r2, [r0, #28]
 80010a6:	2000      	movs	r0, #0
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80010a8:	4283      	cmp	r3, r0
 80010aa:	d006      	beq.n	80010ba <USART_GetITStatus+0x2a>
  bitpos = USART_IT >> 0x10;
 80010ac:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 80010ae:	3001      	adds	r0, #1
 80010b0:	4088      	lsls	r0, r1
  bitpos &= USARTx->ISR;
 80010b2:	4010      	ands	r0, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80010b4:	1e43      	subs	r3, r0, #1
 80010b6:	4198      	sbcs	r0, r3
 80010b8:	b2c0      	uxtb	r0, r0
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80010ba:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80010bc:	2a02      	cmp	r2, #2
 80010be:	d101      	bne.n	80010c4 <USART_GetITStatus+0x34>
    itmask &= USARTx->CR2;
 80010c0:	6842      	ldr	r2, [r0, #4]
 80010c2:	e7ee      	b.n	80010a2 <USART_GetITStatus+0x12>
    itmask &= USARTx->CR3;
 80010c4:	6882      	ldr	r2, [r0, #8]
 80010c6:	e7ec      	b.n	80010a2 <USART_GetITStatus+0x12>

080010c8 <USART_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80010c8:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x10;
 80010ca:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80010cc:	408b      	lsls	r3, r1
  USARTx->ICR = (uint32_t)itmask;
 80010ce:	6203      	str	r3, [r0, #32]
}
 80010d0:	4770      	bx	lr
 80010d2:	46c0      	nop			; (mov r8, r8)

080010d4 <IO_Init>:
	uint8_t u8Index;
	GPIO_InitTypeDef GPIOInit;
	uint16_t u16NoOfPins;

	// Enable Clocks
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80010d4:	2080      	movs	r0, #128	; 0x80
{
 80010d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80010d8:	2101      	movs	r1, #1
{
 80010da:	b085      	sub	sp, #20
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80010dc:	0280      	lsls	r0, r0, #10
 80010de:	f7ff fc93 	bl	8000a08 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80010e2:	2080      	movs	r0, #128	; 0x80
 80010e4:	2101      	movs	r1, #1
 80010e6:	02c0      	lsls	r0, r0, #11
 80010e8:	f7ff fc8e 	bl	8000a08 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80010ec:	2080      	movs	r0, #128	; 0x80
 80010ee:	2101      	movs	r1, #1
 80010f0:	0300      	lsls	r0, r0, #12
 80010f2:	f7ff fc89 	bl	8000a08 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 80010f6:	2080      	movs	r0, #128	; 0x80
 80010f8:	2101      	movs	r1, #1
 80010fa:	0340      	lsls	r0, r0, #13
 80010fc:	f7ff fc84 	bl	8000a08 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8001100:	2080      	movs	r0, #128	; 0x80
 8001102:	2500      	movs	r5, #0
 8001104:	2101      	movs	r1, #1
 8001106:	03c0      	lsls	r0, r0, #15
 8001108:	f7ff fc7e 	bl	8000a08 <RCC_AHBPeriphClockCmd>
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <IO_Init+0xc0>)
 800110e:	1d1c      	adds	r4, r3, #4

	u16NoOfPins = (sizeof(sPinConfig) / sizeof(sPinConfig[0]));
	for(u8Index = 0; u8Index < u16NoOfPins; u8Index++)
	{
		// Configure Pin
		GPIOInit.GPIO_Mode = sPinConfig[u8Index].u8Mode;
 8001110:	7827      	ldrb	r7, [r4, #0]
 8001112:	ab02      	add	r3, sp, #8
 8001114:	711f      	strb	r7, [r3, #4]
		GPIOInit.GPIO_OType = sPinConfig[u8Index].u8OType;
 8001116:	7863      	ldrb	r3, [r4, #1]
 8001118:	aa02      	add	r2, sp, #8
 800111a:	7193      	strb	r3, [r2, #6]
		GPIOInit.GPIO_PuPd = sPinConfig[u8Index].u8PuPd;
 800111c:	78a3      	ldrb	r3, [r4, #2]
		GPIOInit.GPIO_Speed = GPIO_Speed_Level_2;
		pGPIOPort = pPort[((sPinConfig[u8Index].u32Pin & PORTMASK) >> 16)];
 800111e:	491d      	ldr	r1, [pc, #116]	; (8001194 <IO_Init+0xc0>)
		GPIOInit.GPIO_PuPd = sPinConfig[u8Index].u8PuPd;
 8001120:	71d3      	strb	r3, [r2, #7]
		GPIOInit.GPIO_Speed = GPIO_Speed_Level_2;
 8001122:	0013      	movs	r3, r2
 8001124:	2201      	movs	r2, #1
 8001126:	715a      	strb	r2, [r3, #5]
		pGPIOPort = pPort[((sPinConfig[u8Index].u32Pin & PORTMASK) >> 16)];
 8001128:	230a      	movs	r3, #10
 800112a:	436b      	muls	r3, r5
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <IO_Init+0xc0>)
 800112e:	5cd2      	ldrb	r2, [r2, r3]
 8001130:	18cb      	adds	r3, r1, r3
 8001132:	7859      	ldrb	r1, [r3, #1]
 8001134:	0209      	lsls	r1, r1, #8
 8001136:	430a      	orrs	r2, r1
 8001138:	7899      	ldrb	r1, [r3, #2]
 800113a:	78db      	ldrb	r3, [r3, #3]
 800113c:	0409      	lsls	r1, r1, #16
 800113e:	4311      	orrs	r1, r2
 8001140:	061b      	lsls	r3, r3, #24
 8001142:	430b      	orrs	r3, r1
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <IO_Init+0xc4>)
 8001148:	0c1b      	lsrs	r3, r3, #16
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	589e      	ldr	r6, [r3, r2]
		GPIOInit.GPIO_Pin = sPinConfig[u8Index].u32Pin & PINMASK;
 800114e:	466b      	mov	r3, sp
 8001150:	889b      	ldrh	r3, [r3, #4]
		GPIO_Init(pGPIOPort, &GPIOInit);
 8001152:	a902      	add	r1, sp, #8
 8001154:	0030      	movs	r0, r6
		GPIOInit.GPIO_Pin = sPinConfig[u8Index].u32Pin & PINMASK;
 8001156:	9302      	str	r3, [sp, #8]
		GPIO_Init(pGPIOPort, &GPIOInit);
 8001158:	f7ff f8f6 	bl	8000348 <GPIO_Init>
		// Check if this is an alternate function pin
		if(sPinConfig[u8Index].u8Mode == GPIO_Mode_AF)
 800115c:	2f02      	cmp	r7, #2
 800115e:	d10a      	bne.n	8001176 <IO_Init+0xa2>
		{
			GPIO_PinAFConfig(pGPIOPort, sPinConfig[u8Index].u8PinSrc, sPinConfig[u8Index].u8PinAF);
 8001160:	7922      	ldrb	r2, [r4, #4]
 8001162:	78e1      	ldrb	r1, [r4, #3]
 8001164:	0030      	movs	r0, r6
 8001166:	f7ff f967 	bl	8000438 <GPIO_PinAFConfig>
 800116a:	3501      	adds	r5, #1
 800116c:	340a      	adds	r4, #10
	for(u8Index = 0; u8Index < u16NoOfPins; u8Index++)
 800116e:	2d0d      	cmp	r5, #13
 8001170:	d1ce      	bne.n	8001110 <IO_Init+0x3c>
			{
				GPIO_SetBits(pGPIOPort, (sPinConfig[u8Index].u32Pin & PINMASK));
			}
		}
	}
}
 8001172:	b005      	add	sp, #20
 8001174:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(sPinConfig[u8Index].u8Mode == GPIO_Mode_OUT)
 8001176:	2f01      	cmp	r7, #1
 8001178:	d1f7      	bne.n	800116a <IO_Init+0x96>
 800117a:	466a      	mov	r2, sp
			if(sPinConfig[u8Index].u8InitialState == 0)
 800117c:	7963      	ldrb	r3, [r4, #5]
 800117e:	8891      	ldrh	r1, [r2, #4]
				GPIO_ResetBits(pGPIOPort, (sPinConfig[u8Index].u32Pin & PINMASK));
 8001180:	0030      	movs	r0, r6
			if(sPinConfig[u8Index].u8InitialState == 0)
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <IO_Init+0xb8>
				GPIO_ResetBits(pGPIOPort, (sPinConfig[u8Index].u32Pin & PINMASK));
 8001186:	f7ff f94d 	bl	8000424 <GPIO_ResetBits>
 800118a:	e7ee      	b.n	800116a <IO_Init+0x96>
				GPIO_SetBits(pGPIOPort, (sPinConfig[u8Index].u32Pin & PINMASK));
 800118c:	f7ff f948 	bl	8000420 <GPIO_SetBits>
 8001190:	e7eb      	b.n	800116a <IO_Init+0x96>
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	08001874 	.word	0x08001874
 8001198:	20000024 	.word	0x20000024

0800119c <IO_SetOutputPin>:

void IO_SetOutputPin(uint32_t u32Pin)
{
 800119c:	b510      	push	{r4, lr}
	GPIO_TypeDef *pGPIOPort = pPort[((u32Pin & PORTMASK) >> 16)];
	uint16_t u16GPIOPin = u32Pin & PINMASK;

	GPIO_SetBits(pGPIOPort, u16GPIOPin);
 800119e:	b281      	uxth	r1, r0
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <IO_SetOutputPin+0x14>)
	GPIO_TypeDef *pGPIOPort = pPort[((u32Pin & PORTMASK) >> 16)];
 80011a2:	0c00      	lsrs	r0, r0, #16
 80011a4:	0080      	lsls	r0, r0, #2
	GPIO_SetBits(pGPIOPort, u16GPIOPin);
 80011a6:	58c0      	ldr	r0, [r0, r3]
 80011a8:	f7ff f93a 	bl	8000420 <GPIO_SetBits>
}
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	20000024 	.word	0x20000024

080011b4 <IO_ResetOutputPin>:

void IO_ResetOutputPin(uint32_t u32Pin)
{
 80011b4:	b510      	push	{r4, lr}
	GPIO_TypeDef *pGPIOPort = pPort[((u32Pin & PORTMASK) >> 16)];
	uint16_t u16GPIOPin = u32Pin & PINMASK;

	GPIO_ResetBits(pGPIOPort, u16GPIOPin);
 80011b6:	b281      	uxth	r1, r0
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <IO_ResetOutputPin+0x14>)
	GPIO_TypeDef *pGPIOPort = pPort[((u32Pin & PORTMASK) >> 16)];
 80011ba:	0c00      	lsrs	r0, r0, #16
 80011bc:	0080      	lsls	r0, r0, #2
	GPIO_ResetBits(pGPIOPort, u16GPIOPin);
 80011be:	58c0      	ldr	r0, [r0, r3]
 80011c0:	f7ff f930 	bl	8000424 <GPIO_ResetBits>
}
 80011c4:	bd10      	pop	{r4, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	20000024 	.word	0x20000024

080011cc <IO_GetInputPinState>:
bool IO_GetInputPinState(uint32_t u32Pin)
{
	GPIO_TypeDef *pGPIOPort = pPort[((u32Pin & PORTMASK) >> 16)];
	uint16_t u16GPIOPin = u32Pin & PINMASK;

	if(GPIO_ReadInputDataBit(pGPIOPort, u16GPIOPin) == Bit_RESET)
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <IO_GetInputPinState+0x18>)
 80011ce:	b281      	uxth	r1, r0
	GPIO_TypeDef *pGPIOPort = pPort[((u32Pin & PORTMASK) >> 16)];
 80011d0:	0c00      	lsrs	r0, r0, #16
 80011d2:	0080      	lsls	r0, r0, #2
{
 80011d4:	b510      	push	{r4, lr}
	if(GPIO_ReadInputDataBit(pGPIOPort, u16GPIOPin) == Bit_RESET)
 80011d6:	58c0      	ldr	r0, [r0, r3]
 80011d8:	f7ff f910 	bl	80003fc <GPIO_ReadInputDataBit>
 80011dc:	1e43      	subs	r3, r0, #1
 80011de:	4198      	sbcs	r0, r3
	}
	else
	{
		return true;
	}
}
 80011e0:	b2c0      	uxtb	r0, r0
 80011e2:	bd10      	pop	{r4, pc}
 80011e4:	20000024 	.word	0x20000024

080011e8 <Serial_Init>:
void Serial_Init(void)
{
	USART_InitTypeDef UsartPort;

	/* Configure Debug Port */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80011e8:	2080      	movs	r0, #128	; 0x80
{
 80011ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80011ec:	2101      	movs	r1, #1
{
 80011ee:	b087      	sub	sp, #28
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80011f0:	01c0      	lsls	r0, r0, #7
 80011f2:	f7ff fc15 	bl	8000a20 <RCC_APB2PeriphClockCmd>
	USART_DeInit(&UsartPort);
	UsartPort.USART_BaudRate = 115200;
 80011f6:	27e1      	movs	r7, #225	; 0xe1
	USART_DeInit(&UsartPort);
 80011f8:	4668      	mov	r0, sp
 80011fa:	f7ff fc9f 	bl	8000b3c <USART_DeInit>
	UsartPort.USART_WordLength = USART_WordLength_8b;
 80011fe:	2400      	movs	r4, #0
	UsartPort.USART_StopBits = USART_StopBits_1;
	UsartPort.USART_Parity = USART_Parity_No;
	UsartPort.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001200:	230c      	movs	r3, #12
	UsartPort.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_Init(USART1, &UsartPort);
 8001202:	4d1a      	ldr	r5, [pc, #104]	; (800126c <Serial_Init+0x84>)
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8001204:	4e1a      	ldr	r6, [pc, #104]	; (8001270 <Serial_Init+0x88>)
	UsartPort.USART_BaudRate = 115200;
 8001206:	027f      	lsls	r7, r7, #9
	USART_Init(USART1, &UsartPort);
 8001208:	4669      	mov	r1, sp
 800120a:	0028      	movs	r0, r5
	UsartPort.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800120c:	9304      	str	r3, [sp, #16]
	UsartPort.USART_WordLength = USART_WordLength_8b;
 800120e:	9401      	str	r4, [sp, #4]
	UsartPort.USART_StopBits = USART_StopBits_1;
 8001210:	9402      	str	r4, [sp, #8]
	UsartPort.USART_Parity = USART_Parity_No;
 8001212:	9403      	str	r4, [sp, #12]
	UsartPort.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001214:	9405      	str	r4, [sp, #20]
	UsartPort.USART_BaudRate = 115200;
 8001216:	9700      	str	r7, [sp, #0]
	USART_Init(USART1, &UsartPort);
 8001218:	f7ff fd00 	bl	8000c1c <USART_Init>
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 800121c:	2201      	movs	r2, #1
 800121e:	0031      	movs	r1, r6
 8001220:	0028      	movs	r0, r5
 8001222:	f7ff ff01 	bl	8001028 <USART_ITConfig>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8001226:	2380      	movs	r3, #128	; 0x80
	NVIC_EnableIRQ(USART1_IRQn);

	/* Configure GSM port */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART4, ENABLE);
 8001228:	2080      	movs	r0, #128	; 0x80
 800122a:	4d12      	ldr	r5, [pc, #72]	; (8001274 <Serial_Init+0x8c>)
 800122c:	051b      	lsls	r3, r3, #20
 800122e:	602b      	str	r3, [r5, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	0300      	lsls	r0, r0, #12
 8001234:	f7ff fc00 	bl	8000a38 <RCC_APB1PeriphClockCmd>
	USART_DeInit(&UsartPort);
 8001238:	4668      	mov	r0, sp
 800123a:	f7ff fc7f 	bl	8000b3c <USART_DeInit>
	UsartPort.USART_BaudRate = 115200;
	UsartPort.USART_WordLength = USART_WordLength_8b;
	UsartPort.USART_StopBits = USART_StopBits_1;
	UsartPort.USART_Parity = USART_Parity_No;
	UsartPort.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800123e:	230c      	movs	r3, #12
	UsartPort.USART_WordLength = USART_WordLength_8b;
 8001240:	9401      	str	r4, [sp, #4]
	UsartPort.USART_StopBits = USART_StopBits_1;
 8001242:	9402      	str	r4, [sp, #8]
	UsartPort.USART_Parity = USART_Parity_No;
 8001244:	9403      	str	r4, [sp, #12]
	UsartPort.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001246:	9405      	str	r4, [sp, #20]
	USART_Init(USART4, &UsartPort);
 8001248:	4c0b      	ldr	r4, [pc, #44]	; (8001278 <Serial_Init+0x90>)
 800124a:	4669      	mov	r1, sp
 800124c:	0020      	movs	r0, r4
	UsartPort.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800124e:	9304      	str	r3, [sp, #16]
	UsartPort.USART_BaudRate = 115200;
 8001250:	9700      	str	r7, [sp, #0]
	USART_Init(USART4, &UsartPort);
 8001252:	f7ff fce3 	bl	8000c1c <USART_Init>
	USART_ITConfig(USART4, USART_IT_RXNE, ENABLE);
 8001256:	2201      	movs	r2, #1
 8001258:	0031      	movs	r1, r6
 800125a:	0020      	movs	r0, r4
 800125c:	f7ff fee4 	bl	8001028 <USART_ITConfig>
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	059b      	lsls	r3, r3, #22
 8001264:	602b      	str	r3, [r5, #0]
	NVIC_EnableIRQ(USART3_8_IRQn);

	/* Configure Modbus port */

}
 8001266:	b007      	add	sp, #28
 8001268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	40013800 	.word	0x40013800
 8001270:	00050105 	.word	0x00050105
 8001274:	e000e100 	.word	0xe000e100
 8001278:	40004c00 	.word	0x40004c00

0800127c <Serial_InitBuffer>:

bool Serial_InitBuffer(_eSerialPort ePort, uint8_t *pRxBuf, uint16_t u16RxBufSize, uint8_t *pTxBuf, uint16_t u16TxBufSize)
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	ab0a      	add	r3, sp, #40	; 0x28
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	0007      	movs	r7, r0
 8001288:	000e      	movs	r6, r1
 800128a:	9201      	str	r2, [sp, #4]
 800128c:	9302      	str	r3, [sp, #8]
	if((ePort >= eSerial_Max) || (pRxBuf == NULL) || (pTxBuf == NULL))
	{
		return false;
 800128e:	2500      	movs	r5, #0
	if((ePort >= eSerial_Max) || (pRxBuf == NULL) || (pTxBuf == NULL))
 8001290:	2802      	cmp	r0, #2
 8001292:	d843      	bhi.n	800131c <Serial_InitBuffer+0xa0>
 8001294:	42a9      	cmp	r1, r5
 8001296:	d041      	beq.n	800131c <Serial_InitBuffer+0xa0>
 8001298:	9b00      	ldr	r3, [sp, #0]
 800129a:	42ab      	cmp	r3, r5
 800129c:	d03e      	beq.n	800131c <Serial_InitBuffer+0xa0>
	}
	else
	{
		memset(&sSerialPort[ePort], 0, sizeof(sSerialPort[ePort]));
 800129e:	2218      	movs	r2, #24
 80012a0:	0013      	movs	r3, r2
 80012a2:	4343      	muls	r3, r0
 80012a4:	491f      	ldr	r1, [pc, #124]	; (8001324 <Serial_InitBuffer+0xa8>)
 80012a6:	9303      	str	r3, [sp, #12]
 80012a8:	185c      	adds	r4, r3, r1
 80012aa:	0020      	movs	r0, r4
 80012ac:	0029      	movs	r1, r5
 80012ae:	f000 facd 	bl	800184c <memset>
		sSerialPort[ePort].pPort = pUSARTPorts[ePort];
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <Serial_InitBuffer+0xac>)
 80012b4:	00bf      	lsls	r7, r7, #2
 80012b6:	5cfa      	ldrb	r2, [r7, r3]
 80012b8:	491a      	ldr	r1, [pc, #104]	; (8001324 <Serial_InitBuffer+0xa8>)
 80012ba:	9803      	ldr	r0, [sp, #12]
 80012bc:	19df      	adds	r7, r3, r7
 80012be:	5442      	strb	r2, [r0, r1]
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	7063      	strb	r3, [r4, #1]
 80012c4:	78bb      	ldrb	r3, [r7, #2]
 80012c6:	70a3      	strb	r3, [r4, #2]
 80012c8:	78fb      	ldrb	r3, [r7, #3]
		sSerialPort[ePort].sRxBuff.pu8Buff = pRxBuf;
 80012ca:	7126      	strb	r6, [r4, #4]
		sSerialPort[ePort].pPort = pUSARTPorts[ePort];
 80012cc:	70e3      	strb	r3, [r4, #3]
		sSerialPort[ePort].sRxBuff.pu8Buff = pRxBuf;
 80012ce:	0a33      	lsrs	r3, r6, #8
 80012d0:	7163      	strb	r3, [r4, #5]
 80012d2:	0c33      	lsrs	r3, r6, #16
 80012d4:	71a3      	strb	r3, [r4, #6]
		sSerialPort[ePort].sRxBuff.u16GetIndex = 0;
		sSerialPort[ePort].sRxBuff.u16PutIndex = 0;
		sSerialPort[ePort].sRxBuff.u16MaxSize = u16RxBufSize;
 80012d6:	466b      	mov	r3, sp
 80012d8:	791b      	ldrb	r3, [r3, #4]
		sSerialPort[ePort].sRxBuff.pu8Buff = pRxBuf;
 80012da:	0e36      	lsrs	r6, r6, #24
		sSerialPort[ePort].sRxBuff.u16MaxSize = u16RxBufSize;
 80012dc:	7323      	strb	r3, [r4, #12]
 80012de:	9b01      	ldr	r3, [sp, #4]
		sSerialPort[ePort].sRxBuff.u16GetIndex = 0;
 80012e0:	72a5      	strb	r5, [r4, #10]
		sSerialPort[ePort].sRxBuff.u16MaxSize = u16RxBufSize;
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	7363      	strb	r3, [r4, #13]
		sSerialPort[ePort].sTxBuff.pu8Buff = pTxBuf;
 80012e6:	466b      	mov	r3, sp
 80012e8:	781b      	ldrb	r3, [r3, #0]
		sSerialPort[ePort].sRxBuff.u16GetIndex = 0;
 80012ea:	72e5      	strb	r5, [r4, #11]
		sSerialPort[ePort].sTxBuff.pu8Buff = pTxBuf;
 80012ec:	73a3      	strb	r3, [r4, #14]
 80012ee:	9b00      	ldr	r3, [sp, #0]
		sSerialPort[ePort].sRxBuff.u16PutIndex = 0;
 80012f0:	7225      	strb	r5, [r4, #8]
		sSerialPort[ePort].sTxBuff.pu8Buff = pTxBuf;
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	73e3      	strb	r3, [r4, #15]
 80012f6:	9b00      	ldr	r3, [sp, #0]
		sSerialPort[ePort].sRxBuff.u16PutIndex = 0;
 80012f8:	7265      	strb	r5, [r4, #9]
		sSerialPort[ePort].sTxBuff.pu8Buff = pTxBuf;
 80012fa:	0c1b      	lsrs	r3, r3, #16
 80012fc:	7423      	strb	r3, [r4, #16]
 80012fe:	9b00      	ldr	r3, [sp, #0]
		sSerialPort[ePort].sTxBuff.u16GetIndex = 0;
 8001300:	7525      	strb	r5, [r4, #20]
		sSerialPort[ePort].sTxBuff.pu8Buff = pTxBuf;
 8001302:	0e1b      	lsrs	r3, r3, #24
 8001304:	7463      	strb	r3, [r4, #17]
		sSerialPort[ePort].sTxBuff.u16PutIndex = 0;
		sSerialPort[ePort].sTxBuff.u16MaxSize = u16TxBufSize;
 8001306:	466b      	mov	r3, sp
		sSerialPort[ePort].sRxBuff.pu8Buff = pRxBuf;
 8001308:	71e6      	strb	r6, [r4, #7]
		sSerialPort[ePort].sTxBuff.u16GetIndex = 0;
 800130a:	7565      	strb	r5, [r4, #21]
		sSerialPort[ePort].sTxBuff.u16MaxSize = u16TxBufSize;
 800130c:	7a1b      	ldrb	r3, [r3, #8]
		sSerialPort[ePort].sTxBuff.u16PutIndex = 0;
 800130e:	74a5      	strb	r5, [r4, #18]
		sSerialPort[ePort].sTxBuff.u16MaxSize = u16TxBufSize;
 8001310:	75a3      	strb	r3, [r4, #22]
 8001312:	9b02      	ldr	r3, [sp, #8]
		sSerialPort[ePort].sTxBuff.u16PutIndex = 0;
 8001314:	74e5      	strb	r5, [r4, #19]
		sSerialPort[ePort].sTxBuff.u16MaxSize = u16TxBufSize;
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	75e3      	strb	r3, [r4, #23]
		return true;
 800131a:	3501      	adds	r5, #1
	}
}
 800131c:	0028      	movs	r0, r5
 800131e:	b005      	add	sp, #20
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	20002268 	.word	0x20002268
 8001328:	20000038 	.word	0x20000038

0800132c <Serial_Write>:
{
	Serial_RxPutByte(ePort, u8Byte);
}

void Serial_Write(_eSerialPort ePort, uint8_t *pu8Buf, uint16_t u16Len)
{
 800132c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;

	for(i=0; i<u16Len; i++)
	{
		sSerialPort[ePort].sTxBuff.pu8Buff[sSerialPort[ePort].sTxBuff.u16PutIndex] = pu8Buf[i];
 800132e:	2618      	movs	r6, #24
 8001330:	4346      	muls	r6, r0
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <Serial_Write+0x94>)
	for(i=0; i<u16Len; i++)
 8001334:	2500      	movs	r5, #0
		sSerialPort[ePort].sTxBuff.pu8Buff[sSerialPort[ePort].sTxBuff.u16PutIndex] = pu8Buf[i];
 8001336:	199e      	adds	r6, r3, r6
 8001338:	0033      	movs	r3, r6
{
 800133a:	9100      	str	r1, [sp, #0]
 800133c:	9201      	str	r2, [sp, #4]
		sSerialPort[ePort].sTxBuff.pu8Buff[sSerialPort[ePort].sTxBuff.u16PutIndex] = pu8Buf[i];
 800133e:	3308      	adds	r3, #8
	for(i=0; i<u16Len; i++)
 8001340:	9901      	ldr	r1, [sp, #4]
 8001342:	b2aa      	uxth	r2, r5
 8001344:	4291      	cmp	r1, r2
 8001346:	d812      	bhi.n	800136e <Serial_Write+0x42>
		{
			sSerialPort[ePort].sTxBuff.u16PutIndex = 0;
		}
	}
	/* Initiate Transfer */
	USART_ITConfig(sSerialPort[ePort].pPort, USART_IT_TXE, ENABLE);
 8001348:	2318      	movs	r3, #24
 800134a:	4358      	muls	r0, r3
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <Serial_Write+0x94>)
 800134e:	1819      	adds	r1, r3, r0
 8001350:	5c1a      	ldrb	r2, [r3, r0]
 8001352:	784b      	ldrb	r3, [r1, #1]
 8001354:	7888      	ldrb	r0, [r1, #2]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	4313      	orrs	r3, r2
 800135a:	0400      	lsls	r0, r0, #16
 800135c:	4303      	orrs	r3, r0
 800135e:	78c8      	ldrb	r0, [r1, #3]
 8001360:	2201      	movs	r2, #1
 8001362:	0600      	lsls	r0, r0, #24
 8001364:	4318      	orrs	r0, r3
 8001366:	4917      	ldr	r1, [pc, #92]	; (80013c4 <Serial_Write+0x98>)
 8001368:	f7ff fe5e 	bl	8001028 <USART_ITConfig>
}
 800136c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		sSerialPort[ePort].sTxBuff.pu8Buff[sSerialPort[ePort].sTxBuff.u16PutIndex] = pu8Buf[i];
 800136e:	9a00      	ldr	r2, [sp, #0]
 8001370:	799c      	ldrb	r4, [r3, #6]
 8001372:	5d57      	ldrb	r7, [r2, r5]
 8001374:	79da      	ldrb	r2, [r3, #7]
 8001376:	0212      	lsls	r2, r2, #8
 8001378:	4322      	orrs	r2, r4
 800137a:	7a1c      	ldrb	r4, [r3, #8]
 800137c:	0424      	lsls	r4, r4, #16
 800137e:	4322      	orrs	r2, r4
 8001380:	7a5c      	ldrb	r4, [r3, #9]
 8001382:	0624      	lsls	r4, r4, #24
 8001384:	4314      	orrs	r4, r2
 8001386:	7a9a      	ldrb	r2, [r3, #10]
 8001388:	4694      	mov	ip, r2
 800138a:	4661      	mov	r1, ip
 800138c:	7ada      	ldrb	r2, [r3, #11]
 800138e:	0212      	lsls	r2, r2, #8
 8001390:	430a      	orrs	r2, r1
 8001392:	54a7      	strb	r7, [r4, r2]
		sSerialPort[ePort].sTxBuff.u16PutIndex++;
 8001394:	7ada      	ldrb	r2, [r3, #11]
 8001396:	7a9c      	ldrb	r4, [r3, #10]
 8001398:	0212      	lsls	r2, r2, #8
 800139a:	4322      	orrs	r2, r4
 800139c:	3201      	adds	r2, #1
 800139e:	b292      	uxth	r2, r2
 80013a0:	0a14      	lsrs	r4, r2, #8
 80013a2:	72dc      	strb	r4, [r3, #11]
		if(sSerialPort[ePort].sTxBuff.u16PutIndex >= sSerialPort[ePort].sTxBuff.u16MaxSize)
 80013a4:	0034      	movs	r4, r6
		sSerialPort[ePort].sTxBuff.u16PutIndex++;
 80013a6:	729a      	strb	r2, [r3, #10]
		if(sSerialPort[ePort].sTxBuff.u16PutIndex >= sSerialPort[ePort].sTxBuff.u16MaxSize)
 80013a8:	3410      	adds	r4, #16
 80013aa:	79e4      	ldrb	r4, [r4, #7]
 80013ac:	7db1      	ldrb	r1, [r6, #22]
 80013ae:	0224      	lsls	r4, r4, #8
		sSerialPort[ePort].sTxBuff.u16PutIndex++;
 80013b0:	2700      	movs	r7, #0
		if(sSerialPort[ePort].sTxBuff.u16PutIndex >= sSerialPort[ePort].sTxBuff.u16MaxSize)
 80013b2:	430c      	orrs	r4, r1
 80013b4:	42a2      	cmp	r2, r4
 80013b6:	d301      	bcc.n	80013bc <Serial_Write+0x90>
			sSerialPort[ePort].sTxBuff.u16PutIndex = 0;
 80013b8:	729f      	strb	r7, [r3, #10]
 80013ba:	72df      	strb	r7, [r3, #11]
 80013bc:	3501      	adds	r5, #1
 80013be:	e7bf      	b.n	8001340 <Serial_Write+0x14>
 80013c0:	20002268 	.word	0x20002268
 80013c4:	00070107 	.word	0x00070107

080013c8 <Serial_WriteByte>:

void Serial_WriteByte(_eSerialPort ePort, uint8_t u8Byte)
{
 80013c8:	b507      	push	{r0, r1, r2, lr}
 80013ca:	466b      	mov	r3, sp
 80013cc:	71d9      	strb	r1, [r3, #7]
 80013ce:	3307      	adds	r3, #7
	Serial_Write(ePort, &u8Byte, 1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	0019      	movs	r1, r3
 80013d4:	f7ff ffaa 	bl	800132c <Serial_Write>
}
 80013d8:	bd07      	pop	{r0, r1, r2, pc}

080013da <Serial_WriteString>:

void Serial_WriteString(_eSerialPort ePort, char *pszStr)
{
 80013da:	b570      	push	{r4, r5, r6, lr}
 80013dc:	0005      	movs	r5, r0
	Serial_Write(ePort, (uint8_t*)pszStr, strlen(pszStr));
 80013de:	0008      	movs	r0, r1
{
 80013e0:	000c      	movs	r4, r1
	Serial_Write(ePort, (uint8_t*)pszStr, strlen(pszStr));
 80013e2:	f000 f911 	bl	8001608 <strlen>
 80013e6:	0021      	movs	r1, r4
 80013e8:	b282      	uxth	r2, r0
 80013ea:	0028      	movs	r0, r5
 80013ec:	f7ff ff9e 	bl	800132c <Serial_Write>
}
 80013f0:	bd70      	pop	{r4, r5, r6, pc}

080013f2 <Serial_TxGetByte>:

uint8_t Serial_TxGetByte(_eSerialPort ePort)
{
	uint8_t u8Byte = 0;

	if(sSerialPort[ePort].sTxBuff.u16PutIndex != sSerialPort[ePort].sTxBuff.u16GetIndex)
 80013f2:	2118      	movs	r1, #24
 80013f4:	4348      	muls	r0, r1
 80013f6:	4915      	ldr	r1, [pc, #84]	; (800144c <Serial_TxGetByte+0x5a>)
{
 80013f8:	b570      	push	{r4, r5, r6, lr}
	if(sSerialPort[ePort].sTxBuff.u16PutIndex != sSerialPort[ePort].sTxBuff.u16GetIndex)
 80013fa:	1809      	adds	r1, r1, r0
 80013fc:	000c      	movs	r4, r1
 80013fe:	7d4b      	ldrb	r3, [r1, #21]
 8001400:	7d0a      	ldrb	r2, [r1, #20]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	4313      	orrs	r3, r2
 8001406:	7cca      	ldrb	r2, [r1, #19]
 8001408:	7c88      	ldrb	r0, [r1, #18]
 800140a:	0212      	lsls	r2, r2, #8
 800140c:	4302      	orrs	r2, r0
 800140e:	3408      	adds	r4, #8
	uint8_t u8Byte = 0;
 8001410:	2000      	movs	r0, #0
	if(sSerialPort[ePort].sTxBuff.u16PutIndex != sSerialPort[ePort].sTxBuff.u16GetIndex)
 8001412:	429a      	cmp	r2, r3
 8001414:	d018      	beq.n	8001448 <Serial_TxGetByte+0x56>
	{
		u8Byte = sSerialPort[ePort].sTxBuff.pu8Buff[sSerialPort[ePort].sTxBuff.u16GetIndex];
 8001416:	79e0      	ldrb	r0, [r4, #7]
 8001418:	79a2      	ldrb	r2, [r4, #6]
 800141a:	0200      	lsls	r0, r0, #8
 800141c:	4310      	orrs	r0, r2
 800141e:	7a22      	ldrb	r2, [r4, #8]
		sSerialPort[ePort].sTxBuff.u16GetIndex++;
 8001420:	2500      	movs	r5, #0
		u8Byte = sSerialPort[ePort].sTxBuff.pu8Buff[sSerialPort[ePort].sTxBuff.u16GetIndex];
 8001422:	0412      	lsls	r2, r2, #16
 8001424:	4310      	orrs	r0, r2
 8001426:	7a62      	ldrb	r2, [r4, #9]
 8001428:	0612      	lsls	r2, r2, #24
 800142a:	4302      	orrs	r2, r0
 800142c:	5cd0      	ldrb	r0, [r2, r3]
		sSerialPort[ePort].sTxBuff.u16GetIndex++;
 800142e:	3301      	adds	r3, #1
 8001430:	b29b      	uxth	r3, r3
 8001432:	0a1a      	lsrs	r2, r3, #8
 8001434:	7323      	strb	r3, [r4, #12]
 8001436:	7362      	strb	r2, [r4, #13]
		if(sSerialPort[ePort].sTxBuff.u16GetIndex >= sSerialPort[ePort].sTxBuff.u16MaxSize)
 8001438:	7dca      	ldrb	r2, [r1, #23]
 800143a:	7d8e      	ldrb	r6, [r1, #22]
 800143c:	0212      	lsls	r2, r2, #8
 800143e:	4332      	orrs	r2, r6
 8001440:	4293      	cmp	r3, r2
 8001442:	d301      	bcc.n	8001448 <Serial_TxGetByte+0x56>
		{
			sSerialPort[ePort].sTxBuff.u16GetIndex = 0;
 8001444:	7325      	strb	r5, [r4, #12]
 8001446:	7365      	strb	r5, [r4, #13]
		}
	}
	return u8Byte;
}
 8001448:	bd70      	pop	{r4, r5, r6, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	20002268 	.word	0x20002268

08001450 <Serial_TxGetCount>:

uint16_t Serial_TxGetCount(_eSerialPort ePort)
{
	uint16_t u16Count = 0;
	uint16_t u16Index = sSerialPort[ePort].sTxBuff.u16GetIndex;
 8001450:	2218      	movs	r2, #24
{
 8001452:	b530      	push	{r4, r5, lr}
	uint16_t u16Index = sSerialPort[ePort].sTxBuff.u16GetIndex;
 8001454:	4350      	muls	r0, r2
 8001456:	4a0d      	ldr	r2, [pc, #52]	; (800148c <Serial_TxGetCount+0x3c>)
 8001458:	1812      	adds	r2, r2, r0
 800145a:	7d53      	ldrb	r3, [r2, #21]
 800145c:	7d10      	ldrb	r0, [r2, #20]

	while(u16Index != sSerialPort[ePort].sTxBuff.u16PutIndex)
 800145e:	7cd4      	ldrb	r4, [r2, #19]
	uint16_t u16Index = sSerialPort[ePort].sTxBuff.u16GetIndex;
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	4303      	orrs	r3, r0
	while(u16Index != sSerialPort[ePort].sTxBuff.u16PutIndex)
 8001464:	7c90      	ldrb	r0, [r2, #18]
 8001466:	0224      	lsls	r4, r4, #8
 8001468:	4304      	orrs	r4, r0
	uint16_t u16Count = 0;
 800146a:	2000      	movs	r0, #0
	{
		u16Count++;
		u16Index++;
		if(u16Index >= sSerialPort[ePort].sTxBuff.u16MaxSize)
 800146c:	3210      	adds	r2, #16
	while(u16Index != sSerialPort[ePort].sTxBuff.u16PutIndex)
 800146e:	42a3      	cmp	r3, r4
 8001470:	d100      	bne.n	8001474 <Serial_TxGetCount+0x24>
		{
			u16Index = 0;
		}
	}
	return u16Count;
}
 8001472:	bd30      	pop	{r4, r5, pc}
		if(u16Index >= sSerialPort[ePort].sTxBuff.u16MaxSize)
 8001474:	79d1      	ldrb	r1, [r2, #7]
 8001476:	7995      	ldrb	r5, [r2, #6]
		u16Index++;
 8001478:	3301      	adds	r3, #1
		if(u16Index >= sSerialPort[ePort].sTxBuff.u16MaxSize)
 800147a:	0209      	lsls	r1, r1, #8
		u16Index++;
 800147c:	b29b      	uxth	r3, r3
		if(u16Index >= sSerialPort[ePort].sTxBuff.u16MaxSize)
 800147e:	4329      	orrs	r1, r5
			u16Index = 0;
 8001480:	428b      	cmp	r3, r1
 8001482:	4189      	sbcs	r1, r1
		u16Count++;
 8001484:	3001      	adds	r0, #1
 8001486:	b280      	uxth	r0, r0
			u16Index = 0;
 8001488:	400b      	ands	r3, r1
 800148a:	e7f0      	b.n	800146e <Serial_TxGetCount+0x1e>
 800148c:	20002268 	.word	0x20002268

08001490 <Serial_TxCallback>:
{
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	0004      	movs	r4, r0
	if(Serial_TxGetCount(ePort) > 0)
 8001494:	f7ff ffdc 	bl	8001450 <Serial_TxGetCount>
 8001498:	2118      	movs	r1, #24
 800149a:	0002      	movs	r2, r0
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <Serial_TxCallback+0x58>)
		USART_SendData(sSerialPort[ePort].pPort, (uint16_t)Serial_TxGetByte(ePort));
 800149e:	4361      	muls	r1, r4
	if(Serial_TxGetCount(ePort) > 0)
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d012      	beq.n	80014ca <Serial_TxCallback+0x3a>
		USART_SendData(sSerialPort[ePort].pPort, (uint16_t)Serial_TxGetByte(ePort));
 80014a4:	5c5d      	ldrb	r5, [r3, r1]
 80014a6:	185b      	adds	r3, r3, r1
 80014a8:	785a      	ldrb	r2, [r3, #1]
 80014aa:	0020      	movs	r0, r4
 80014ac:	0212      	lsls	r2, r2, #8
 80014ae:	432a      	orrs	r2, r5
 80014b0:	789d      	ldrb	r5, [r3, #2]
 80014b2:	042d      	lsls	r5, r5, #16
 80014b4:	432a      	orrs	r2, r5
 80014b6:	78dd      	ldrb	r5, [r3, #3]
 80014b8:	062d      	lsls	r5, r5, #24
 80014ba:	4315      	orrs	r5, r2
 80014bc:	f7ff ff99 	bl	80013f2 <Serial_TxGetByte>
 80014c0:	b281      	uxth	r1, r0
 80014c2:	0028      	movs	r0, r5
 80014c4:	f7ff fcd6 	bl	8000e74 <USART_SendData>
}
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
		USART_ITConfig(sSerialPort[ePort].pPort, USART_IT_TXE, DISABLE);
 80014ca:	5c5c      	ldrb	r4, [r3, r1]
 80014cc:	185b      	adds	r3, r3, r1
 80014ce:	7858      	ldrb	r0, [r3, #1]
 80014d0:	4906      	ldr	r1, [pc, #24]	; (80014ec <Serial_TxCallback+0x5c>)
 80014d2:	0200      	lsls	r0, r0, #8
 80014d4:	4304      	orrs	r4, r0
 80014d6:	7898      	ldrb	r0, [r3, #2]
 80014d8:	78db      	ldrb	r3, [r3, #3]
 80014da:	0400      	lsls	r0, r0, #16
 80014dc:	4320      	orrs	r0, r4
 80014de:	061b      	lsls	r3, r3, #24
 80014e0:	4318      	orrs	r0, r3
 80014e2:	f7ff fda1 	bl	8001028 <USART_ITConfig>
}
 80014e6:	e7ef      	b.n	80014c8 <Serial_TxCallback+0x38>
 80014e8:	20002268 	.word	0x20002268
 80014ec:	00070107 	.word	0x00070107

080014f0 <Serial_RxPutByte>:

void Serial_RxPutByte(_eSerialPort ePort, uint8_t u8Byte)
{
	sSerialPort[ePort].sRxBuff.pu8Buff[sSerialPort[ePort].sRxBuff.u16PutIndex] = u8Byte;
 80014f0:	2318      	movs	r3, #24
{
 80014f2:	b530      	push	{r4, r5, lr}
	sSerialPort[ePort].sRxBuff.pu8Buff[sSerialPort[ePort].sRxBuff.u16PutIndex] = u8Byte;
 80014f4:	4358      	muls	r0, r3
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <Serial_RxPutByte+0x50>)
 80014f8:	1818      	adds	r0, r3, r0
 80014fa:	7943      	ldrb	r3, [r0, #5]
 80014fc:	7902      	ldrb	r2, [r0, #4]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	4313      	orrs	r3, r2
 8001502:	7982      	ldrb	r2, [r0, #6]
 8001504:	7a04      	ldrb	r4, [r0, #8]
 8001506:	0412      	lsls	r2, r2, #16
 8001508:	4313      	orrs	r3, r2
 800150a:	79c2      	ldrb	r2, [r0, #7]
 800150c:	0612      	lsls	r2, r2, #24
 800150e:	431a      	orrs	r2, r3
 8001510:	7a43      	ldrb	r3, [r0, #9]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	4323      	orrs	r3, r4
 8001516:	54d1      	strb	r1, [r2, r3]
	sSerialPort[ePort].sRxBuff.u16PutIndex++;
 8001518:	7a43      	ldrb	r3, [r0, #9]
 800151a:	7a02      	ldrb	r2, [r0, #8]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	4313      	orrs	r3, r2
 8001520:	3301      	adds	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	0a1a      	lsrs	r2, r3, #8
 8001526:	7242      	strb	r2, [r0, #9]
	if(sSerialPort[ePort].sRxBuff.u16PutIndex >= sSerialPort[ePort].sRxBuff.u16MaxSize)
 8001528:	7b42      	ldrb	r2, [r0, #13]
 800152a:	7b05      	ldrb	r5, [r0, #12]
 800152c:	0212      	lsls	r2, r2, #8
	sSerialPort[ePort].sRxBuff.u16PutIndex++;
 800152e:	2100      	movs	r1, #0
 8001530:	7203      	strb	r3, [r0, #8]
	if(sSerialPort[ePort].sRxBuff.u16PutIndex >= sSerialPort[ePort].sRxBuff.u16MaxSize)
 8001532:	432a      	orrs	r2, r5
 8001534:	4293      	cmp	r3, r2
 8001536:	d301      	bcc.n	800153c <Serial_RxPutByte+0x4c>
	{
		sSerialPort[ePort].sRxBuff.u16PutIndex = 0;
 8001538:	7201      	strb	r1, [r0, #8]
 800153a:	7241      	strb	r1, [r0, #9]
	}
}
 800153c:	bd30      	pop	{r4, r5, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	20002268 	.word	0x20002268

08001544 <Serial_RxCallback>:
{
 8001544:	b510      	push	{r4, lr}
	Serial_RxPutByte(ePort, u8Byte);
 8001546:	f7ff ffd3 	bl	80014f0 <Serial_RxPutByte>
}
 800154a:	bd10      	pop	{r4, pc}

0800154c <Serial_RxGetCount>:

uint16_t Serial_RxGetCount(_eSerialPort ePort)
{
	uint16_t u16Count = 0;
	uint16_t u16Index = sSerialPort[ePort].sRxBuff.u16GetIndex;
 800154c:	2218      	movs	r2, #24
{
 800154e:	b530      	push	{r4, r5, lr}
	uint16_t u16Index = sSerialPort[ePort].sRxBuff.u16GetIndex;
 8001550:	4350      	muls	r0, r2
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <Serial_RxGetCount+0x40>)
 8001554:	1812      	adds	r2, r2, r0
 8001556:	7ad3      	ldrb	r3, [r2, #11]
 8001558:	7a91      	ldrb	r1, [r2, #10]

	while(u16Index != sSerialPort[ePort].sRxBuff.u16PutIndex)
 800155a:	7a54      	ldrb	r4, [r2, #9]
	uint16_t u16Index = sSerialPort[ePort].sRxBuff.u16GetIndex;
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	430b      	orrs	r3, r1
	while(u16Index != sSerialPort[ePort].sRxBuff.u16PutIndex)
 8001560:	7a11      	ldrb	r1, [r2, #8]
 8001562:	0224      	lsls	r4, r4, #8
	{
		u16Count++;
		u16Index++;
		if(u16Index >= sSerialPort[ePort].sRxBuff.u16MaxSize)
 8001564:	3208      	adds	r2, #8
	while(u16Index != sSerialPort[ePort].sRxBuff.u16PutIndex)
 8001566:	430c      	orrs	r4, r1
	uint16_t u16Count = 0;
 8001568:	2000      	movs	r0, #0
		if(u16Index >= sSerialPort[ePort].sRxBuff.u16MaxSize)
 800156a:	0011      	movs	r1, r2
	while(u16Index != sSerialPort[ePort].sRxBuff.u16PutIndex)
 800156c:	42a3      	cmp	r3, r4
 800156e:	d100      	bne.n	8001572 <Serial_RxGetCount+0x26>
		{
			u16Index = 0;
		}
	}
	return u16Count;
}
 8001570:	bd30      	pop	{r4, r5, pc}
		if(u16Index >= sSerialPort[ePort].sRxBuff.u16MaxSize)
 8001572:	794a      	ldrb	r2, [r1, #5]
 8001574:	790d      	ldrb	r5, [r1, #4]
		u16Index++;
 8001576:	3301      	adds	r3, #1
		if(u16Index >= sSerialPort[ePort].sRxBuff.u16MaxSize)
 8001578:	0212      	lsls	r2, r2, #8
		u16Index++;
 800157a:	b29b      	uxth	r3, r3
		if(u16Index >= sSerialPort[ePort].sRxBuff.u16MaxSize)
 800157c:	432a      	orrs	r2, r5
			u16Index = 0;
 800157e:	4293      	cmp	r3, r2
 8001580:	4192      	sbcs	r2, r2
		u16Count++;
 8001582:	3001      	adds	r0, #1
 8001584:	b280      	uxth	r0, r0
			u16Index = 0;
 8001586:	4013      	ands	r3, r2
 8001588:	e7f0      	b.n	800156c <Serial_RxGetCount+0x20>
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	20002268 	.word	0x20002268

08001590 <Serial_ReadByte>:

uint8_t Serial_ReadByte(_eSerialPort ePort)
{
	uint8_t u8Byte;

	u8Byte = sSerialPort[ePort].sRxBuff.pu8Buff[sSerialPort[ePort].sRxBuff.u16GetIndex];
 8001590:	2318      	movs	r3, #24
{
 8001592:	b530      	push	{r4, r5, lr}
	u8Byte = sSerialPort[ePort].sRxBuff.pu8Buff[sSerialPort[ePort].sRxBuff.u16GetIndex];
 8001594:	4358      	muls	r0, r3
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <Serial_ReadByte+0x3c>)
 8001598:	181b      	adds	r3, r3, r0
 800159a:	7ada      	ldrb	r2, [r3, #11]
 800159c:	7a99      	ldrb	r1, [r3, #10]
 800159e:	0212      	lsls	r2, r2, #8
 80015a0:	7958      	ldrb	r0, [r3, #5]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	7919      	ldrb	r1, [r3, #4]
 80015a6:	0200      	lsls	r0, r0, #8
 80015a8:	4308      	orrs	r0, r1
 80015aa:	7999      	ldrb	r1, [r3, #6]
	if(sSerialPort[ePort].sRxBuff.u16GetIndex > sSerialPort[ePort].sRxBuff.u16MaxSize)
 80015ac:	7b1d      	ldrb	r5, [r3, #12]
	u8Byte = sSerialPort[ePort].sRxBuff.pu8Buff[sSerialPort[ePort].sRxBuff.u16GetIndex];
 80015ae:	0409      	lsls	r1, r1, #16
 80015b0:	4308      	orrs	r0, r1
 80015b2:	79d9      	ldrb	r1, [r3, #7]
 80015b4:	0609      	lsls	r1, r1, #24
 80015b6:	4301      	orrs	r1, r0
 80015b8:	5c88      	ldrb	r0, [r1, r2]
	if(sSerialPort[ePort].sRxBuff.u16GetIndex > sSerialPort[ePort].sRxBuff.u16MaxSize)
 80015ba:	7b59      	ldrb	r1, [r3, #13]
 80015bc:	0209      	lsls	r1, r1, #8
 80015be:	4329      	orrs	r1, r5
 80015c0:	428a      	cmp	r2, r1
 80015c2:	d902      	bls.n	80015ca <Serial_ReadByte+0x3a>
	{
		sSerialPort[ePort].sRxBuff.u16GetIndex = 0;
 80015c4:	2200      	movs	r2, #0
 80015c6:	729a      	strb	r2, [r3, #10]
 80015c8:	72da      	strb	r2, [r3, #11]
	}
	return u8Byte;
}
 80015ca:	bd30      	pop	{r4, r5, pc}
 80015cc:	20002268 	.word	0x20002268

080015d0 <Serial_Read>:

uint16_t Serial_Read(_eSerialPort ePort, uint8_t *pBuf, uint16_t u16Len)
{
 80015d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015d2:	0006      	movs	r6, r0
 80015d4:	9101      	str	r1, [sp, #4]
 80015d6:	0017      	movs	r7, r2
	uint16_t u16Count = Serial_RxGetCount(ePort);
 80015d8:	f7ff ffb8 	bl	800154c <Serial_RxGetCount>
 80015dc:	1e04      	subs	r4, r0, #0
	uint16_t i;

	if(u16Count > 0)
 80015de:	d00a      	beq.n	80015f6 <Serial_Read+0x26>
 80015e0:	b282      	uxth	r2, r0
 80015e2:	9d01      	ldr	r5, [sp, #4]
 80015e4:	1c03      	adds	r3, r0, #0
 80015e6:	42ba      	cmp	r2, r7
 80015e8:	d900      	bls.n	80015ec <Serial_Read+0x1c>
 80015ea:	1c3b      	adds	r3, r7, #0
 80015ec:	b29f      	uxth	r7, r3
 80015ee:	9b01      	ldr	r3, [sp, #4]
 80015f0:	19df      	adds	r7, r3, r7
	{
		if(u16Len > u16Count)
		{
			u16Len = u16Count;
		}
		for(i=0; i<u16Len; i++)
 80015f2:	42af      	cmp	r7, r5
 80015f4:	d101      	bne.n	80015fa <Serial_Read+0x2a>
		{
			pBuf[i] = Serial_ReadByte(ePort);
		}
	}
	return u16Count;
}
 80015f6:	0020      	movs	r0, r4
 80015f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			pBuf[i] = Serial_ReadByte(ePort);
 80015fa:	0030      	movs	r0, r6
 80015fc:	f7ff ffc8 	bl	8001590 <Serial_ReadByte>
 8001600:	7028      	strb	r0, [r5, #0]
 8001602:	3501      	adds	r5, #1
 8001604:	e7f5      	b.n	80015f2 <Serial_Read+0x22>
 8001606:	46c0      	nop			; (mov r8, r8)

08001608 <strlen>:
 8001608:	2300      	movs	r3, #0
 800160a:	5cc2      	ldrb	r2, [r0, r3]
 800160c:	3301      	adds	r3, #1
 800160e:	2a00      	cmp	r2, #0
 8001610:	d1fb      	bne.n	800160a <strlen+0x2>
 8001612:	1e58      	subs	r0, r3, #1
 8001614:	4770      	bx	lr
	...

08001618 <__gnu_thumb1_case_uqi>:
 8001618:	b402      	push	{r1}
 800161a:	4671      	mov	r1, lr
 800161c:	0849      	lsrs	r1, r1, #1
 800161e:	0049      	lsls	r1, r1, #1
 8001620:	5c09      	ldrb	r1, [r1, r0]
 8001622:	0049      	lsls	r1, r1, #1
 8001624:	448e      	add	lr, r1
 8001626:	bc02      	pop	{r1}
 8001628:	4770      	bx	lr
 800162a:	46c0      	nop			; (mov r8, r8)

0800162c <__udivsi3>:
 800162c:	2200      	movs	r2, #0
 800162e:	0843      	lsrs	r3, r0, #1
 8001630:	428b      	cmp	r3, r1
 8001632:	d374      	bcc.n	800171e <__udivsi3+0xf2>
 8001634:	0903      	lsrs	r3, r0, #4
 8001636:	428b      	cmp	r3, r1
 8001638:	d35f      	bcc.n	80016fa <__udivsi3+0xce>
 800163a:	0a03      	lsrs	r3, r0, #8
 800163c:	428b      	cmp	r3, r1
 800163e:	d344      	bcc.n	80016ca <__udivsi3+0x9e>
 8001640:	0b03      	lsrs	r3, r0, #12
 8001642:	428b      	cmp	r3, r1
 8001644:	d328      	bcc.n	8001698 <__udivsi3+0x6c>
 8001646:	0c03      	lsrs	r3, r0, #16
 8001648:	428b      	cmp	r3, r1
 800164a:	d30d      	bcc.n	8001668 <__udivsi3+0x3c>
 800164c:	22ff      	movs	r2, #255	; 0xff
 800164e:	0209      	lsls	r1, r1, #8
 8001650:	ba12      	rev	r2, r2
 8001652:	0c03      	lsrs	r3, r0, #16
 8001654:	428b      	cmp	r3, r1
 8001656:	d302      	bcc.n	800165e <__udivsi3+0x32>
 8001658:	1212      	asrs	r2, r2, #8
 800165a:	0209      	lsls	r1, r1, #8
 800165c:	d065      	beq.n	800172a <__udivsi3+0xfe>
 800165e:	0b03      	lsrs	r3, r0, #12
 8001660:	428b      	cmp	r3, r1
 8001662:	d319      	bcc.n	8001698 <__udivsi3+0x6c>
 8001664:	e000      	b.n	8001668 <__udivsi3+0x3c>
 8001666:	0a09      	lsrs	r1, r1, #8
 8001668:	0bc3      	lsrs	r3, r0, #15
 800166a:	428b      	cmp	r3, r1
 800166c:	d301      	bcc.n	8001672 <__udivsi3+0x46>
 800166e:	03cb      	lsls	r3, r1, #15
 8001670:	1ac0      	subs	r0, r0, r3
 8001672:	4152      	adcs	r2, r2
 8001674:	0b83      	lsrs	r3, r0, #14
 8001676:	428b      	cmp	r3, r1
 8001678:	d301      	bcc.n	800167e <__udivsi3+0x52>
 800167a:	038b      	lsls	r3, r1, #14
 800167c:	1ac0      	subs	r0, r0, r3
 800167e:	4152      	adcs	r2, r2
 8001680:	0b43      	lsrs	r3, r0, #13
 8001682:	428b      	cmp	r3, r1
 8001684:	d301      	bcc.n	800168a <__udivsi3+0x5e>
 8001686:	034b      	lsls	r3, r1, #13
 8001688:	1ac0      	subs	r0, r0, r3
 800168a:	4152      	adcs	r2, r2
 800168c:	0b03      	lsrs	r3, r0, #12
 800168e:	428b      	cmp	r3, r1
 8001690:	d301      	bcc.n	8001696 <__udivsi3+0x6a>
 8001692:	030b      	lsls	r3, r1, #12
 8001694:	1ac0      	subs	r0, r0, r3
 8001696:	4152      	adcs	r2, r2
 8001698:	0ac3      	lsrs	r3, r0, #11
 800169a:	428b      	cmp	r3, r1
 800169c:	d301      	bcc.n	80016a2 <__udivsi3+0x76>
 800169e:	02cb      	lsls	r3, r1, #11
 80016a0:	1ac0      	subs	r0, r0, r3
 80016a2:	4152      	adcs	r2, r2
 80016a4:	0a83      	lsrs	r3, r0, #10
 80016a6:	428b      	cmp	r3, r1
 80016a8:	d301      	bcc.n	80016ae <__udivsi3+0x82>
 80016aa:	028b      	lsls	r3, r1, #10
 80016ac:	1ac0      	subs	r0, r0, r3
 80016ae:	4152      	adcs	r2, r2
 80016b0:	0a43      	lsrs	r3, r0, #9
 80016b2:	428b      	cmp	r3, r1
 80016b4:	d301      	bcc.n	80016ba <__udivsi3+0x8e>
 80016b6:	024b      	lsls	r3, r1, #9
 80016b8:	1ac0      	subs	r0, r0, r3
 80016ba:	4152      	adcs	r2, r2
 80016bc:	0a03      	lsrs	r3, r0, #8
 80016be:	428b      	cmp	r3, r1
 80016c0:	d301      	bcc.n	80016c6 <__udivsi3+0x9a>
 80016c2:	020b      	lsls	r3, r1, #8
 80016c4:	1ac0      	subs	r0, r0, r3
 80016c6:	4152      	adcs	r2, r2
 80016c8:	d2cd      	bcs.n	8001666 <__udivsi3+0x3a>
 80016ca:	09c3      	lsrs	r3, r0, #7
 80016cc:	428b      	cmp	r3, r1
 80016ce:	d301      	bcc.n	80016d4 <__udivsi3+0xa8>
 80016d0:	01cb      	lsls	r3, r1, #7
 80016d2:	1ac0      	subs	r0, r0, r3
 80016d4:	4152      	adcs	r2, r2
 80016d6:	0983      	lsrs	r3, r0, #6
 80016d8:	428b      	cmp	r3, r1
 80016da:	d301      	bcc.n	80016e0 <__udivsi3+0xb4>
 80016dc:	018b      	lsls	r3, r1, #6
 80016de:	1ac0      	subs	r0, r0, r3
 80016e0:	4152      	adcs	r2, r2
 80016e2:	0943      	lsrs	r3, r0, #5
 80016e4:	428b      	cmp	r3, r1
 80016e6:	d301      	bcc.n	80016ec <__udivsi3+0xc0>
 80016e8:	014b      	lsls	r3, r1, #5
 80016ea:	1ac0      	subs	r0, r0, r3
 80016ec:	4152      	adcs	r2, r2
 80016ee:	0903      	lsrs	r3, r0, #4
 80016f0:	428b      	cmp	r3, r1
 80016f2:	d301      	bcc.n	80016f8 <__udivsi3+0xcc>
 80016f4:	010b      	lsls	r3, r1, #4
 80016f6:	1ac0      	subs	r0, r0, r3
 80016f8:	4152      	adcs	r2, r2
 80016fa:	08c3      	lsrs	r3, r0, #3
 80016fc:	428b      	cmp	r3, r1
 80016fe:	d301      	bcc.n	8001704 <__udivsi3+0xd8>
 8001700:	00cb      	lsls	r3, r1, #3
 8001702:	1ac0      	subs	r0, r0, r3
 8001704:	4152      	adcs	r2, r2
 8001706:	0883      	lsrs	r3, r0, #2
 8001708:	428b      	cmp	r3, r1
 800170a:	d301      	bcc.n	8001710 <__udivsi3+0xe4>
 800170c:	008b      	lsls	r3, r1, #2
 800170e:	1ac0      	subs	r0, r0, r3
 8001710:	4152      	adcs	r2, r2
 8001712:	0843      	lsrs	r3, r0, #1
 8001714:	428b      	cmp	r3, r1
 8001716:	d301      	bcc.n	800171c <__udivsi3+0xf0>
 8001718:	004b      	lsls	r3, r1, #1
 800171a:	1ac0      	subs	r0, r0, r3
 800171c:	4152      	adcs	r2, r2
 800171e:	1a41      	subs	r1, r0, r1
 8001720:	d200      	bcs.n	8001724 <__udivsi3+0xf8>
 8001722:	4601      	mov	r1, r0
 8001724:	4152      	adcs	r2, r2
 8001726:	4610      	mov	r0, r2
 8001728:	4770      	bx	lr
 800172a:	e7ff      	b.n	800172c <__udivsi3+0x100>
 800172c:	b501      	push	{r0, lr}
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f806 	bl	8001740 <__aeabi_idiv0>
 8001734:	bd02      	pop	{r1, pc}
 8001736:	46c0      	nop			; (mov r8, r8)

08001738 <__aeabi_uidivmod>:
 8001738:	2900      	cmp	r1, #0
 800173a:	d0f7      	beq.n	800172c <__udivsi3+0x100>
 800173c:	e776      	b.n	800162c <__udivsi3>
 800173e:	4770      	bx	lr

08001740 <__aeabi_idiv0>:
 8001740:	4770      	bx	lr
 8001742:	46c0      	nop			; (mov r8, r8)

08001744 <main>:
}

int main(void)
{
	/* Adding a comment here to test git */
	SysTick_Config(SystemCoreClock / 1000);
 8001744:	21fa      	movs	r1, #250	; 0xfa
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <main+0x3c>)
{
 8001748:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock / 1000);
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	0089      	lsls	r1, r1, #2
 800174e:	f7ff ff6d 	bl	800162c <__udivsi3>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <main+0x40>)
 8001754:	3801      	subs	r0, #1
 8001756:	4298      	cmp	r0, r3
 8001758:	d80d      	bhi.n	8001776 <main+0x32>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800175a:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <main+0x44>)
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800175e:	0609      	lsls	r1, r1, #24
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001760:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8001762:	480a      	ldr	r0, [pc, #40]	; (800178c <main+0x48>)
 8001764:	6a03      	ldr	r3, [r0, #32]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	430b      	orrs	r3, r1
 800176c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800176e:	2300      	movs	r3, #0
 8001770:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	3307      	adds	r3, #7
 8001774:	6013      	str	r3, [r2, #0]

	Board_Init();
 8001776:	f7fe fcc5 	bl	8000104 <Board_Init>

	return 0;
}
 800177a:	2000      	movs	r0, #0
 800177c:	bd10      	pop	{r4, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	20000000 	.word	0x20000000
 8001784:	00ffffff 	.word	0x00ffffff
 8001788:	e000e010 	.word	0xe000e010
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001792:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001794:	2004      	movs	r0, #4
    LDR R1, [R0]
 8001796:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001798:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800179a:	221f      	movs	r2, #31
    CMP R1, R2
 800179c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800179e:	d105      	bne.n	80017ac <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80017a0:	4810      	ldr	r0, [pc, #64]	; (80017e4 <LoopForever+0x6>)
    LDR R1,=0x00000001
 80017a2:	2101      	movs	r1, #1
    STR R1, [R0]
 80017a4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80017a6:	4810      	ldr	r0, [pc, #64]	; (80017e8 <LoopForever+0xa>)
    LDR R1,=0x00000000
 80017a8:	2100      	movs	r1, #0
    STR R1, [R0]
 80017aa:	6001      	str	r1, [r0, #0]

080017ac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017ae:	e003      	b.n	80017b8 <LoopCopyDataInit>

080017b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <LoopForever+0xe>)
  ldr r3, [r3, r1]
 80017b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017b6:	3104      	adds	r1, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <LoopForever+0x12>)
  ldr r3, =_edata
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <LoopForever+0x16>)
  adds r2, r0, r1
 80017bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017c0:	d3f6      	bcc.n	80017b0 <CopyDataInit>
  ldr r2, =_sbss
 80017c2:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <LoopForever+0x1a>)
  b LoopFillZerobss
 80017c4:	e002      	b.n	80017cc <LoopFillZerobss>

080017c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  str  r3, [r2]
 80017c8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ca:	3204      	adds	r2, #4

080017cc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <LoopForever+0x1e>)
  cmp r2, r3
 80017ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017d0:	d3f9      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017d2:	f7fe fcb5 	bl	8000140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f000 f815 	bl	8001804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017da:	f7ff ffb3 	bl	8001744 <main>

080017de <LoopForever>:
  
LoopForever:
    b LoopForever
 80017de:	e7fe      	b.n	80017de <LoopForever>
  ldr   r0, =_estack
 80017e0:	20008000 	.word	0x20008000
    LDR R0,=0x40021018
 80017e4:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 80017e8:	40010000 	.word	0x40010000
  ldr r3, =_sidata
 80017ec:	08001900 	.word	0x08001900
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017f4:	20000044 	.word	0x20000044
  ldr r2, =_sbss
 80017f8:	20000044 	.word	0x20000044
  ldr r3, = _ebss
 80017fc:	200022b0 	.word	0x200022b0

08001800 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_COMP_IRQHandler>
	...

08001804 <__libc_init_array>:
 8001804:	b570      	push	{r4, r5, r6, lr}
 8001806:	2600      	movs	r6, #0
 8001808:	4d0c      	ldr	r5, [pc, #48]	; (800183c <__libc_init_array+0x38>)
 800180a:	4c0d      	ldr	r4, [pc, #52]	; (8001840 <__libc_init_array+0x3c>)
 800180c:	1b64      	subs	r4, r4, r5
 800180e:	10a4      	asrs	r4, r4, #2
 8001810:	42a6      	cmp	r6, r4
 8001812:	d109      	bne.n	8001828 <__libc_init_array+0x24>
 8001814:	2600      	movs	r6, #0
 8001816:	f000 f821 	bl	800185c <_init>
 800181a:	4d0a      	ldr	r5, [pc, #40]	; (8001844 <__libc_init_array+0x40>)
 800181c:	4c0a      	ldr	r4, [pc, #40]	; (8001848 <__libc_init_array+0x44>)
 800181e:	1b64      	subs	r4, r4, r5
 8001820:	10a4      	asrs	r4, r4, #2
 8001822:	42a6      	cmp	r6, r4
 8001824:	d105      	bne.n	8001832 <__libc_init_array+0x2e>
 8001826:	bd70      	pop	{r4, r5, r6, pc}
 8001828:	00b3      	lsls	r3, r6, #2
 800182a:	58eb      	ldr	r3, [r5, r3]
 800182c:	4798      	blx	r3
 800182e:	3601      	adds	r6, #1
 8001830:	e7ee      	b.n	8001810 <__libc_init_array+0xc>
 8001832:	00b3      	lsls	r3, r6, #2
 8001834:	58eb      	ldr	r3, [r5, r3]
 8001836:	4798      	blx	r3
 8001838:	3601      	adds	r6, #1
 800183a:	e7f2      	b.n	8001822 <__libc_init_array+0x1e>
 800183c:	080018f8 	.word	0x080018f8
 8001840:	080018f8 	.word	0x080018f8
 8001844:	080018f8 	.word	0x080018f8
 8001848:	080018fc 	.word	0x080018fc

0800184c <memset>:
 800184c:	0003      	movs	r3, r0
 800184e:	1882      	adds	r2, r0, r2
 8001850:	4293      	cmp	r3, r2
 8001852:	d100      	bne.n	8001856 <memset+0xa>
 8001854:	4770      	bx	lr
 8001856:	7019      	strb	r1, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	e7f9      	b.n	8001850 <memset+0x4>

0800185c <_init>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001862:	bc08      	pop	{r3}
 8001864:	469e      	mov	lr, r3
 8001866:	4770      	bx	lr

08001868 <_fini>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186e:	bc08      	pop	{r3}
 8001870:	469e      	mov	lr, r3
 8001872:	4770      	bx	lr
